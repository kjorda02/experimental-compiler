
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package experimental_compiler;

import arbol.flow.stmts_node;
import arbol.flow.stmt_node;
import java_cup.runtime.ComplexSymbolFactory.*;
import java_cup.runtime.*;
import java.util.HashMap;
import arbol.*;
import arbol.ref.*;
import arbol.val.*;
import arbol.type.*;
import arbol.flow.*;
import datos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\022\005\000\002\022" +
    "\006\000\002\022\003\000\002\022\004\000\002\021\006" +
    "\000\002\021\006\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\006\000\002\017\004\000\002" +
    "\017\003\000\002\017\006\000\002\020\005\000\002\023" +
    "\004\000\002\023\006\000\002\023\007\000\002\016\003" +
    "\000\002\016\006\000\002\016\005\000\002\016\006\000" +
    "\002\016\005\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\005\000\002\012\003\000\002\012" +
    "\005\000\002\013\003\000\002\013\004\000\002\013\004" +
    "\000\002\014\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\010\005\000\002\015\003\000\002\015\003\000" +
    "\002\004\011\000\002\003\011\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\005" +
    "\003\000\002\005\003\000\002\006\004\000\002\006\005" +
    "\000\002\006\003\000\002\006\004\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\044\003\036\006\007\007\035\010\026\011" +
    "\017\013\012\021\005\022\030\024\021\033\014\042\041" +
    "\046\010\047\042\050\025\051\027\052\044\053\022\001" +
    "\002\000\040\020\uffe4\021\uffe4\022\uffe4\023\uffe4\025\uffe4" +
    "\026\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\043\uffe4\001\002\000\012\024\021" +
    "\051\027\052\044\053\022\001\002\000\004\026\uffcd\001" +
    "\002\000\004\004\161\001\002\000\006\026\ufffa\053\ufffa" +
    "\001\002\000\004\026\uffcf\001\002\000\004\024\153\001" +
    "\002\000\004\053\150\001\002\000\012\024\021\051\027" +
    "\052\044\053\022\001\002\000\046\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\025\uffe6\026\uffe6\027\145\031\uffe6\032\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042" +
    "\064\043\uffe6\045\065\001\002\000\004\002\144\001\002" +
    "\000\004\024\136\001\002\000\004\026\uffce\001\002\000" +
    "\020\003\132\021\005\024\021\033\014\051\027\052\044" +
    "\053\022\001\002\000\046\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\025\uffef\026\uffef\027\uffef\031\uffef\032\uffef\034\uffef" +
    "\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\045\uffef\001\002\000\050\002\uffc7\003\036\005\uffc7" +
    "\006\007\007\035\010\026\011\017\013\012\021\005\022" +
    "\030\024\021\033\014\042\041\046\010\047\042\050\025" +
    "\051\027\052\044\053\022\001\002\000\040\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\025\uffe1\026\uffe1\031\uffe1\032\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\001\002\000\006\026\ufff8\053\ufff8\001\002\000\004" +
    "\053\127\001\002\000\040\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\025\uffea\026\uffea\031\uffea\032\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea\001\002\000" +
    "\016\006\007\022\030\042\041\046\010\047\042\050\025" +
    "\001\002\000\004\002\uffc5\001\002\000\050\002\uffca\003" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\013\uffca" +
    "\021\uffca\022\uffca\024\uffca\033\uffca\042\uffca\046\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\001\002\000\010" +
    "\004\123\026\ufff5\053\ufff5\001\002\000\050\002\uffcb\003" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb" +
    "\021\uffcb\022\uffcb\024\uffcb\033\uffcb\042\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\001\002\000\016" +
    "\006\007\022\030\042\041\046\010\047\042\050\025\001" +
    "\002\000\004\026\uffcc\001\002\000\010\025\uffd2\026\uffd2" +
    "\043\uffd2\001\002\000\040\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\025\uffe8\026\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\001\002\000" +
    "\020\003\111\021\005\024\021\033\014\051\027\052\044" +
    "\053\022\001\002\000\006\026\ufff9\053\ufff9\001\002\000" +
    "\004\026\107\001\002\000\040\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\025\uffe9\026\uffe9\031\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\001\002" +
    "\000\040\020\051\021\055\022\047\023\054\025\uffd3\026" +
    "\uffd3\031\046\032\060\034\057\035\053\036\061\037\056" +
    "\040\052\041\050\043\uffd3\001\002\000\016\021\005\024" +
    "\021\033\014\051\027\052\044\053\022\001\002\000\016" +
    "\021\005\024\021\033\014\051\027\052\044\053\022\001" +
    "\002\000\016\021\005\024\021\033\014\051\027\052\044" +
    "\053\022\001\002\000\016\021\005\024\021\033\014\051" +
    "\027\052\044\053\022\001\002\000\016\021\005\024\021" +
    "\033\014\051\027\052\044\053\022\001\002\000\016\021" +
    "\005\024\021\033\014\051\027\052\044\053\022\001\002" +
    "\000\016\021\005\024\021\033\014\051\027\052\044\053" +
    "\022\001\002\000\016\021\005\024\021\033\014\051\027" +
    "\052\044\053\022\001\002\000\016\021\005\024\021\033" +
    "\014\051\027\052\044\053\022\001\002\000\016\021\005" +
    "\024\021\033\014\051\027\052\044\053\022\001\002\000" +
    "\016\021\005\024\021\033\014\051\027\052\044\053\022" +
    "\001\002\000\016\021\005\024\021\033\014\051\027\052" +
    "\044\053\022\001\002\000\044\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\025\uffe6\026\uffe6\031\uffe6\032\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\064\043\uffe6" +
    "\045\065\001\002\000\040\020\051\021\055\022\047\023" +
    "\054\025\uffda\026\uffda\031\uffda\032\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda\001\002\000" +
    "\020\003\070\021\005\024\021\033\014\051\027\052\044" +
    "\053\022\001\002\000\006\003\067\053\066\001\002\000" +
    "\046\020\uffed\021\uffed\022\uffed\023\uffed\025\uffed\026\uffed" +
    "\027\uffed\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\045\uffed\001\002" +
    "\000\046\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\001" +
    "\002\000\004\043\073\001\002\000\004\043\072\001\002" +
    "\000\046\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\026" +
    "\uffee\027\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\001" +
    "\002\000\046\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec" +
    "\026\uffec\027\uffec\031\uffec\032\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\045\uffec" +
    "\001\002\000\040\020\051\021\055\022\047\023\054\025" +
    "\uffd5\026\uffd5\031\046\032\uffd5\034\057\035\053\036\061" +
    "\037\056\040\052\041\050\043\uffd5\001\002\000\040\020" +
    "\051\021\055\022\047\023\054\025\uffdc\026\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\043\uffdc\001\002\000\040\020\051\021\055\022\047" +
    "\023\054\025\uffd9\026\uffd9\031\uffd9\032\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\001\002" +
    "\000\040\020\uffdd\021\uffdd\022\047\023\054\025\uffdd\026" +
    "\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\043\uffdd\001\002\000\040\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\031\uffe0\032\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\043" +
    "\uffe0\001\002\000\040\020\051\021\055\022\047\023\054" +
    "\025\uffdb\026\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\001\002\000\040" +
    "\020\051\021\055\022\047\023\054\025\uffd8\026\uffd8\031" +
    "\uffd8\032\uffd8\034\057\035\053\036\061\037\056\040\uffd8" +
    "\041\uffd8\043\uffd8\001\002\000\040\020\uffde\021\uffde\022" +
    "\047\023\054\025\uffde\026\uffde\031\uffde\032\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043\uffde\001" +
    "\002\000\040\020\051\021\055\022\047\023\054\025\uffd7" +
    "\026\uffd7\031\uffd7\032\uffd7\034\057\035\053\036\061\037" +
    "\056\040\uffd7\041\uffd7\043\uffd7\001\002\000\040\020\uffdf" +
    "\021\uffdf\022\uffdf\023\054\025\uffdf\026\uffdf\031\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\001\002\000\040\020\051\021\055\022\047\023" +
    "\054\025\uffd6\026\uffd6\031\uffd6\032\uffd6\034\057\035\053" +
    "\036\061\037\056\040\052\041\050\043\uffd6\001\002\000" +
    "\050\002\uffc9\003\036\005\uffc9\006\007\007\035\010\026" +
    "\011\017\013\012\021\005\022\030\024\021\033\014\042" +
    "\041\046\010\047\042\050\025\051\027\052\044\053\022" +
    "\001\002\000\006\002\uffc8\005\uffc8\001\002\000\004\043" +
    "\115\001\002\000\004\043\113\001\002\000\016\006\007" +
    "\022\030\042\041\046\010\047\042\050\025\001\002\000" +
    "\006\026\ufff7\053\ufff7\001\002\000\016\006\007\022\030" +
    "\042\041\046\010\047\042\050\025\001\002\000\006\026" +
    "\ufff4\053\ufff4\001\002\000\004\053\120\001\002\000\004" +
    "\027\121\001\002\000\016\021\005\024\021\033\014\051" +
    "\027\052\044\053\022\001\002\000\004\026\ufff0\001\002" +
    "\000\004\003\124\001\002\000\004\005\125\001\002\000" +
    "\010\004\ufffb\026\ufffb\053\ufffb\001\002\000\006\026\ufff6" +
    "\053\ufff6\001\002\000\016\006\007\022\030\042\041\046" +
    "\010\047\042\050\025\001\002\000\004\026\ufff3\001\002" +
    "\000\006\002\uffc6\005\uffc6\001\002\000\004\025\135\001" +
    "\002\000\004\025\134\001\002\000\040\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\025\uffe7\026\uffe7\031\uffe7\032\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7" +
    "\001\002\000\040\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025" +
    "\uffe5\026\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\043\uffe5\001\002\000\016\021" +
    "\005\024\021\033\014\051\027\052\044\053\022\001\002" +
    "\000\004\025\140\001\002\000\004\004\141\001\002\000" +
    "\044\003\036\006\007\007\035\010\026\011\017\013\012" +
    "\021\005\022\030\024\021\033\014\042\041\046\010\047" +
    "\042\050\025\051\027\052\044\053\022\001\002\000\004" +
    "\005\143\001\002\000\050\002\uffd1\003\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\021\uffd1\022\uffd1" +
    "\024\uffd1\033\uffd1\042\uffd1\046\uffd1\047\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\001\002\000\004\002\001\001\002" +
    "\000\016\021\005\024\021\033\014\051\027\052\044\053" +
    "\022\001\002\000\010\025\uffd4\026\uffd4\043\uffd4\001\002" +
    "\000\040\020\uffe3\021\uffe3\022\uffe3\023\uffe3\025\uffe3\026" +
    "\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\043\uffe3\001\002\000\006\026\ufff2\027" +
    "\151\001\002\000\016\021\005\024\021\033\014\051\027" +
    "\052\044\053\022\001\002\000\004\026\ufff1\001\002\000" +
    "\016\021\005\024\021\033\014\051\027\052\044\053\022" +
    "\001\002\000\004\025\155\001\002\000\004\004\156\001" +
    "\002\000\044\003\036\006\007\007\035\010\026\011\017" +
    "\013\012\021\005\022\030\024\021\033\014\042\041\046" +
    "\010\047\042\050\025\051\027\052\044\053\022\001\002" +
    "\000\004\005\160\001\002\000\050\002\uffd0\003\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\021\uffd0" +
    "\022\uffd0\024\uffd0\033\uffd0\042\uffd0\046\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\001\002\000\020\003\164" +
    "\006\007\022\030\042\041\046\010\047\042\050\025\001" +
    "\002\000\004\005\171\001\002\000\004\053\166\001\002" +
    "\000\022\003\164\005\ufffe\006\007\022\030\042\041\046" +
    "\010\047\042\050\025\001\002\000\004\005\ufffd\001\002" +
    "\000\004\026\167\001\002\000\022\003\164\005\000\006" +
    "\007\022\030\042\041\046\010\047\042\050\025\001\002" +
    "\000\004\005\uffff\001\002\000\010\004\ufffc\026\ufffc\053" +
    "\ufffc\001\002\000\040\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\025\uffe2\026\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\044\002\015\003\031\004\033\005\022\006" +
    "\030\007\042\010\036\011\037\012\003\013\023\014\044" +
    "\015\005\016\014\017\012\020\017\021\032\023\010\001" +
    "\001\000\002\001\001\000\010\011\037\012\171\016\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\037\012\146\016\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\010\036\011\037\012\003\013\023\014\044\015" +
    "\132\016\014\001\001\000\002\001\001\000\042\003\031" +
    "\004\033\005\022\006\130\007\042\010\036\011\037\012" +
    "\003\013\023\014\044\015\005\016\014\017\012\020\017" +
    "\021\032\023\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\125" +
    "\021\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\116\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\036\011\037\012\003\013\023\014\044" +
    "\015\111\016\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\037" +
    "\012\003\013\023\014\105\016\061\001\001\000\014\011" +
    "\037\012\003\013\023\014\104\016\061\001\001\000\014" +
    "\011\037\012\003\013\023\014\103\016\061\001\001\000" +
    "\014\011\037\012\003\013\023\014\102\016\061\001\001" +
    "\000\014\011\037\012\003\013\023\014\101\016\061\001" +
    "\001\000\014\011\037\012\003\013\023\014\100\016\061" +
    "\001\001\000\014\011\037\012\003\013\023\014\077\016" +
    "\061\001\001\000\014\011\037\012\003\013\023\014\076" +
    "\016\061\001\001\000\014\011\037\012\003\013\023\014" +
    "\075\016\061\001\001\000\014\011\037\012\003\013\023" +
    "\014\074\016\061\001\001\000\014\011\037\012\003\013" +
    "\023\014\073\016\061\001\001\000\014\011\037\012\003" +
    "\013\023\014\062\016\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\036\011\037\012\003\013\023" +
    "\014\044\015\070\016\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\031\004\033\005\022\006\107\007" +
    "\042\010\036\011\037\012\003\013\023\014\044\015\005" +
    "\016\014\017\012\020\017\021\032\023\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\113\021\032\001\001\000\002\001\001\000\006\017" +
    "\115\021\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\010\036\011\037\012\003\013" +
    "\023\014\044\015\121\016\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\127\021\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\036" +
    "\011\037\012\003\013\023\014\044\015\136\016\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\031" +
    "\004\033\005\022\006\141\007\042\010\036\011\037\012" +
    "\003\013\023\014\044\015\005\016\014\017\012\020\017" +
    "\021\032\023\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\036\011\037\012\003" +
    "\013\023\014\044\015\145\016\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\010\036" +
    "\011\037\012\003\013\023\014\044\015\151\016\014\001" +
    "\001\000\002\001\001\000\020\010\036\011\037\012\003" +
    "\013\023\014\044\015\153\016\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\031\004\033\005\022" +
    "\006\156\007\042\010\036\011\037\012\003\013\023\014" +
    "\044\015\005\016\014\017\012\020\017\021\032\023\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\162\021\032\022\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\162\021\032\022\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\162\021\032" +
    "\022\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        Main.report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        Main.report_error("Unexpected token", cur_token);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        Main.report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fields ::= type ID SEMI 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.struct(null, i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fields ::= type ID SEMI fields 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f.addField(i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fields ::= error 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fields ::= error fields 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct ::= STRUCT LKEY fields RKEY 
            {
              complexType.struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // struct ::= struct LKEY error RKEY 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOL 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= STRING 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LBRAC expr RBRAC type 
            {
              complexType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.array(null, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= MULT type 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.pointer(null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= struct 
            {
              complexType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct s = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= LBRAC error RBRAC type 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typedecl ::= TYPE ID type 
            {
              typedecl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= type ID 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= type ID ASS expr 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= CONST type ID ASS expr 
            {
              decl_node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		terminal_node c = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(c.left, t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ref ::= ID 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new identifier_ref_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ref ::= ref LBRAC expr RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new displ_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ref ::= ref DOT ID 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new field_node(r, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ref ::= ref LBRAC error RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ref ::= ref DOT error 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literal ::= INTLIT 
            {
              literal_expr_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Integer> i = (terminal_node<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literal ::= BOOLLIT 
            {
              literal_expr_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Boolean> b = (terminal_node<Boolean>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom_expr ::= literal 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal_expr_node e = (literal_expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom_expr ::= LPAREN expr RPAREN 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // atom_expr ::= ref 
            {
              expr_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // atom_expr ::= LPAREN error RPAREN 
            {
              expr_node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unary_expr ::= atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unary_expr ::= NOT atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unary_expr ::= NEG atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NEG, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // binary_expr ::= unary_expr 
            {
              binaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		unaryOp_node e = (unaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // binary_expr ::= binary_expr DIV binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.DIV, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // binary_expr ::= binary_expr MULT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.TIMES, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // binary_expr ::= binary_expr PLUS binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.PLUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binary_expr ::= binary_expr NEG binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEG, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binary_expr ::= binary_expr LT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binary_expr ::= binary_expr GT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binary_expr ::= binary_expr LEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binary_expr ::= binary_expr GEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binary_expr ::= binary_expr EQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.EQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binary_expr ::= binary_expr NEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binary_expr ::= binary_expr AND binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.AND, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binary_expr ::= binary_expr OR binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.OR, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign ::= ref ASS expr 
            {
              assign_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new assign_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= binary_expr 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= assign 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		assign_node e = (assign_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ifstmt ::= IF LPAREN expr RPAREN LKEY stmts RKEY 
            {
              ifstmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ifstmt_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // while ::= WHILE LPAREN expr RPAREN LKEY stmts RKEY 
            {
              while_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new while_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= decl 
            {
              stmt_node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= typedecl 
            {
              stmt_node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= expr 
            {
              stmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= error 
            {
              stmt_node RESULT =null;
		 RESULT = new stmt_node(new node()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // blockstmt ::= ifstmt 
            {
              stmt_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifstmt_node i = (ifstmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // blockstmt ::= while 
            {
              stmt_node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		while_node w = (while_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmts ::= stmt SEMI 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new stmts_node(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmts ::= stmt SEMI stmts 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(s, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmts ::= blockstmt 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmts ::= blockstmt stmts 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prog ::= stmts 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 s.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
