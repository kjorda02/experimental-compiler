
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package experimental_compiler;

import java_cup.runtime.ComplexSymbolFactory.*;
import java_cup.runtime.*;
import java.util.HashMap;
import arbol.*;
import arbol.ref.*;
import arbol.val.*;
import arbol.type.*;
import arbol.flow.*;
import arbol.fun.*;
import datos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\025\005\000\002\025" +
    "\006\000\002\025\003\000\002\025\004\000\002\024\006" +
    "\000\002\024\006\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\006\000\002" +
    "\022\004\000\002\022\003\000\002\022\006\000\002\023" +
    "\005\000\002\026\004\000\002\026\006\000\002\026\007" +
    "\000\002\030\005\000\002\030\003\000\002\030\002\000" +
    "\002\021\003\000\002\021\006\000\002\021\005\000\002" +
    "\021\006\000\002\021\006\000\002\021\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\005\000\002\015\003\000\002\015\005\000" +
    "\002\015\005\000\002\016\003\000\002\016\004\000\002" +
    "\016\004\000\002\017\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\013\005\000\002\020" +
    "\003\000\002\020\003\000\002\036\003\000\002\037\003" +
    "\000\002\007\011\000\002\003\011\000\002\035\003\000" +
    "\002\035\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\006\000\002\012\003\000\002\006" +
    "\003\000\002\006\003\000\002\005\003\000\002\004\015" +
    "\000\002\004\014\000\002\004\014\000\002\004\014\000" +
    "\002\004\013\000\002\004\013\000\002\004\013\000\002" +
    "\004\012\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\004\000\002\011\005\000\002\011\003" +
    "\000\002\011\004\000\002\027\006\000\002\027\004\000" +
    "\002\027\007\000\002\027\005\000\002\027\002\000\002" +
    "\031\007\000\002\031\007\000\002\032\004\000\002\032" +
    "\003\000\002\033\004\000\002\034\005\000\002\034\004" +
    "\000\002\002\003\000\002\002\004\000\002\002\003\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\026\007\026\011\005\012\022\013\014\030" +
    "\016\051\023\055\006\056\010\057\024\060\015\001\002" +
    "\000\060\003\231\005\164\006\230\011\005\012\022\014" +
    "\226\016\234\017\222\024\221\025\052\027\063\030\016" +
    "\033\064\042\061\051\023\055\006\056\010\057\024\060" +
    "\015\061\051\062\055\063\057\064\053\001\002\000\004" +
    "\004\044\001\002\000\034\002\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\030\ufffa\035\ufffa\051\ufffa\055\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\064\ufffa\001\002\000\004\035\206\001" +
    "\002\000\034\002\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\030\ufff9\035\ufff9\051\ufff9\055\ufff9\056\ufff9\057\ufff9\060" +
    "\ufff9\064\ufff9\001\002\000\004\064\200\001\002\000\030" +
    "\002\174\007\026\011\005\012\022\013\014\030\016\051" +
    "\023\055\006\056\010\057\024\060\015\001\002\000\004" +
    "\035\171\001\002\000\004\064\167\001\002\000\034\002" +
    "\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\030\ufff7\035\ufff7" +
    "\051\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\064\ufff7\001" +
    "\002\000\020\011\005\030\016\051\023\055\006\056\010" +
    "\057\024\060\015\001\002\000\030\002\uff9e\007\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\030\uff9e\051\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\001\002\000\034\002\uffa4\004\uffa4\007" +
    "\uffa4\011\uffa4\012\uffa4\013\uffa4\030\uffa4\035\165\051\uffa4" +
    "\055\uffa4\056\uffa4\057\uffa4\060\uffa4\001\002\000\036\002" +
    "\ufff4\004\044\007\ufff4\011\ufff4\012\ufff4\013\ufff4\030\ufff4" +
    "\035\ufff4\051\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\064" +
    "\ufff4\001\002\000\020\011\005\030\016\051\023\055\006" +
    "\056\010\057\024\060\015\001\002\000\024\003\054\025" +
    "\052\027\063\033\064\042\061\061\051\062\055\063\057" +
    "\064\053\001\002\000\034\002\ufff8\007\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\030\ufff8\035\ufff8\051\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\064\ufff8\001\002\000\032\002\uffa0\004" +
    "\044\007\uffa0\011\uffa0\012\uffa0\013\uffa0\030\uffa0\051\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\001\002\000\004\064" +
    "\027\001\002\000\004\033\030\001\002\000\024\010\032" +
    "\011\005\030\016\034\uffa8\051\023\055\006\056\010\057" +
    "\024\060\015\001\002\000\004\064\041\001\002\000\020" +
    "\011\005\030\016\051\023\055\006\056\010\057\024\060" +
    "\015\001\002\000\004\034\034\001\002\000\034\002\uffa6" +
    "\004\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\030\uffa6\035" +
    "\uffa6\051\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\001\002" +
    "\000\004\064\036\001\002\000\006\034\uffa9\053\037\001" +
    "\002\000\024\010\032\011\005\030\016\034\uffa8\051\023" +
    "\055\006\056\010\057\024\060\015\001\002\000\004\034" +
    "\uffaa\001\002\000\006\034\uffab\053\042\001\002\000\024" +
    "\010\032\011\005\030\016\034\uffa8\051\023\055\006\056" +
    "\010\057\024\060\015\001\002\000\004\034\uffac\001\002" +
    "\000\060\003\uffc9\005\uffc9\006\uffc9\011\uffc9\012\uffc9\014" +
    "\uffc9\016\uffc9\017\uffc9\024\uffc9\025\uffc9\027\uffc9\030\uffc9" +
    "\033\uffc9\042\uffc9\051\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\001\002\000\060" +
    "\003\uffa3\005\uffa3\006\uffa3\011\uffa3\012\uffa3\014\uffa3\016" +
    "\uffa3\017\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3\033\uffa3" +
    "\042\uffa3\051\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002\000\052\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036" +
    "\153\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\051\074\052\uffe0\053\uffe0\054\075\001" +
    "\002\000\044\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\034\uffdd\035\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\001\002" +
    "\000\044\026\125\027\131\030\122\031\130\032\123\034" +
    "\uffcb\035\uffcb\040\121\041\134\043\133\044\127\045\135" +
    "\046\132\047\126\050\124\052\uffcb\053\uffcb\001\002\000" +
    "\044\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\052\uffe5\053\uffe5\001\002\000\004" +
    "\033\117\001\002\000\054\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\111\034\uffeb\035\uffeb\036\uffeb\040\uffeb" +
    "\041\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\001\002\000\004" +
    "\052\107\001\002\000\044\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\053" +
    "\uffe4\001\002\000\044\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\034\uffe2\035\uffe2\040\uffe2\041\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\053\uffe2" +
    "\001\002\000\044\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3\053\uffe3\001" +
    "\002\000\004\052\105\001\002\000\016\025\052\033\064" +
    "\061\051\062\055\063\057\064\053\001\002\000\044\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035\uffda" +
    "\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\052\uffda\053\uffda\001\002\000\016\025\052" +
    "\033\064\061\051\062\055\063\057\064\053\001\002\000" +
    "\024\003\066\025\052\027\063\033\064\042\061\061\051" +
    "\062\055\063\057\064\053\001\002\000\012\034\uffca\035" +
    "\uffca\052\uffca\053\uffca\001\002\000\004\034\071\001\002" +
    "\000\004\034\070\001\002\000\044\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052" +
    "\uffe1\053\uffe1\001\002\000\044\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\032\uffde\034\uffde\035\uffde\040\uffde\041\uffde\043" +
    "\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\052\uffde" +
    "\053\uffde\001\002\000\050\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\034\uffe0\035\uffe0\040\uffe0\041\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\074\052" +
    "\uffe0\053\uffe0\054\075\001\002\000\044\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\040\uffdb\041" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\024\003\100\025\052\027" +
    "\063\033\064\042\061\061\051\062\055\063\057\064\053" +
    "\001\002\000\006\003\077\064\076\001\002\000\052\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\001\002\000\052\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\001\002\000\004\052\103\001\002" +
    "\000\004\052\102\001\002\000\052\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea\040\uffea" +
    "\041\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\001\002\000\052" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\001\002\000\044\026\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\052\uffdc\053\uffdc" +
    "\001\002\000\020\011\005\030\016\051\023\055\006\056" +
    "\010\057\024\060\015\001\002\000\034\002\ufff6\007\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\030\ufff6\035\ufff6\051\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\064\ufff6\001\002\000\020" +
    "\011\005\030\016\051\023\055\006\056\010\057\024\060" +
    "\015\001\002\000\034\002\ufff3\007\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\030\ufff3\035\ufff3\051\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\064\ufff3\001\002\000\024\025\052\027\063" +
    "\033\064\034\uffec\042\061\061\051\062\055\063\057\064" +
    "\053\001\002\000\004\034\116\001\002\000\006\034\uffed" +
    "\053\114\001\002\000\024\025\052\027\063\033\064\034" +
    "\uffec\042\061\061\051\062\055\063\057\064\053\001\002" +
    "\000\004\034\uffee\001\002\000\052\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\041\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\001\002\000\004" +
    "\034\120\001\002\000\044\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\034\uffdf\035\uffdf\040\uffdf\041\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\022\025\052\027\063\033\064\042\061" +
    "\061\051\062\055\063\057\064\053\001\002\000\022\025" +
    "\052\027\063\033\064\042\061\061\051\062\055\063\057" +
    "\064\053\001\002\000\022\025\052\027\063\033\064\042" +
    "\061\061\051\062\055\063\057\064\053\001\002\000\022" +
    "\025\052\027\063\033\064\042\061\061\051\062\055\063" +
    "\057\064\053\001\002\000\022\025\052\027\063\033\064" +
    "\042\061\061\051\062\055\063\057\064\053\001\002\000" +
    "\022\025\052\027\063\033\064\042\061\061\051\062\055" +
    "\063\057\064\053\001\002\000\022\025\052\027\063\033" +
    "\064\042\061\061\051\062\055\063\057\064\053\001\002" +
    "\000\022\025\052\027\063\033\064\042\061\061\051\062" +
    "\055\063\057\064\053\001\002\000\022\025\052\027\063" +
    "\033\064\042\061\061\051\062\055\063\057\064\053\001" +
    "\002\000\022\025\052\027\063\033\064\042\061\061\051" +
    "\062\055\063\057\064\053\001\002\000\022\025\052\027" +
    "\063\033\064\042\061\061\051\062\055\063\057\064\053" +
    "\001\002\000\022\025\052\027\063\033\064\042\061\061" +
    "\051\062\055\063\057\064\053\001\002\000\022\025\052" +
    "\027\063\033\064\042\061\061\051\062\055\063\057\064" +
    "\053\001\002\000\044\026\125\027\131\030\122\031\130" +
    "\032\123\034\uffd2\035\uffd2\040\uffd2\041\uffd2\043\uffd2\044" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2" +
    "\001\002\000\044\026\125\027\131\030\122\031\130\032" +
    "\123\034\uffcd\035\uffcd\040\121\041\uffcd\043\133\044\127" +
    "\045\135\046\132\047\126\050\124\052\uffcd\053\uffcd\001" +
    "\002\000\044\026\125\027\131\030\122\031\130\032\123" +
    "\034\uffd4\035\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\052\uffd4\053\uffd4\001\002" +
    "\000\044\026\125\027\131\030\122\031\130\032\123\034" +
    "\uffd1\035\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\001\002\000" +
    "\044\026\uffd5\027\uffd5\030\122\031\130\032\123\034\uffd5" +
    "\035\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\053\uffd5\001\002\000\044" +
    "\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\123\034\uffd8\035" +
    "\uffd8\040\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\050\uffd8\052\uffd8\053\uffd8\001\002\000\044\026" +
    "\125\027\131\030\122\031\130\032\123\034\uffd3\035\uffd3" +
    "\040\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\052\uffd3\053\uffd3\001\002\000\044\026\125" +
    "\027\131\030\122\031\130\032\123\034\uffd0\035\uffd0\040" +
    "\uffd0\041\uffd0\043\133\044\127\045\135\046\132\047\uffd0" +
    "\050\uffd0\052\uffd0\053\uffd0\001\002\000\044\026\uffd6\027" +
    "\uffd6\030\122\031\130\032\123\034\uffd6\035\uffd6\040\uffd6" +
    "\041\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\044\026\125\027\131" +
    "\030\122\031\130\032\123\034\uffcf\035\uffcf\040\uffcf\041" +
    "\uffcf\043\133\044\127\045\135\046\132\047\uffcf\050\uffcf" +
    "\052\uffcf\053\uffcf\001\002\000\044\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\040\uffd9\041\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052" +
    "\uffd9\053\uffd9\001\002\000\044\026\uffd7\027\uffd7\030\uffd7" +
    "\031\130\032\123\034\uffd7\035\uffd7\040\uffd7\041\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7" +
    "\053\uffd7\001\002\000\044\026\125\027\131\030\122\031" +
    "\130\032\123\034\uffce\035\uffce\040\uffce\041\uffce\043\133" +
    "\044\127\045\135\046\132\047\126\050\124\052\uffce\053" +
    "\uffce\001\002\000\022\025\052\027\063\033\064\042\061" +
    "\061\051\062\055\063\057\064\053\001\002\000\012\034" +
    "\uffcc\035\uffcc\052\uffcc\053\uffcc\001\002\000\004\064\156" +
    "\001\002\000\004\036\157\001\002\000\022\025\052\027" +
    "\063\033\064\042\061\061\051\062\055\063\057\064\053" +
    "\001\002\000\004\035\uffef\001\002\000\004\003\162\001" +
    "\002\000\004\005\164\001\002\000\036\002\ufffb\004\ufffb" +
    "\007\ufffb\011\ufffb\012\ufffb\013\ufffb\030\ufffb\035\ufffb\051" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\064\ufffb\001\002" +
    "\000\072\002\uffc8\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8" +
    "\024\uffc8\025\uffc8\027\uffc8\030\uffc8\033\uffc8\035\uffc8\042" +
    "\uffc8\051\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\062\uffc8\063\uffc8\064\uffc8\001\002\000\032\002\uffa5\004" +
    "\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\030\uffa5\051\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\001\002\000\034\002" +
    "\ufff5\007\ufff5\011\ufff5\012\ufff5\013\ufff5\030\ufff5\035\ufff5" +
    "\051\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\064\ufff5\001" +
    "\002\000\020\011\005\030\016\051\023\055\006\056\010" +
    "\057\024\060\015\001\002\000\032\002\ufff2\007\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\030\ufff2\035\ufff2\051\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\001\002\000\030\002\uff9c\007" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\030\uff9c\051\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\001\002\000\004\035\177\001" +
    "\002\000\030\002\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b" +
    "\030\uff9b\051\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\001" +
    "\002\000\004\002\001\001\002\000\030\002\uff9d\007\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\030\uff9d\051\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\001\002\000\032\002\uff9f\004\044" +
    "\007\uff9f\011\uff9f\012\uff9f\013\uff9f\030\uff9f\051\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\001\002\000\030\002\uff99" +
    "\007\uff99\011\uff99\012\uff99\013\uff99\030\uff99\051\uff99\055" +
    "\uff99\056\uff99\057\uff99\060\uff99\001\002\000\010\033\201" +
    "\035\ufff1\036\202\001\002\000\024\010\032\011\005\030" +
    "\016\034\uffa8\051\023\055\006\056\010\057\024\060\015" +
    "\001\002\000\022\025\052\027\063\033\064\042\061\061" +
    "\051\062\055\063\057\064\053\001\002\000\004\035\ufff0" +
    "\001\002\000\004\034\205\001\002\000\034\002\uffa7\004" +
    "\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\030\uffa7\035\uffa7" +
    "\051\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\001\002\000" +
    "\030\002\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\030\uff9a" +
    "\051\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\001\002\000" +
    "\022\003\211\011\005\030\016\051\023\055\006\056\010" +
    "\057\024\060\015\001\002\000\004\005\164\001\002\000" +
    "\024\003\211\005\ufffe\011\005\030\016\051\023\055\006" +
    "\056\010\057\024\060\015\001\002\000\004\064\213\001" +
    "\002\000\004\035\214\001\002\000\024\003\211\005\000" +
    "\011\005\030\016\051\023\055\006\056\010\057\024\060" +
    "\015\001\002\000\004\005\uffff\001\002\000\004\005\ufffd" +
    "\001\002\000\036\002\ufffc\004\ufffc\007\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\030\ufffc\035\ufffc\051\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\060\ufffc\064\ufffc\001\002\000\030\002\uffa1\007" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\030\uffa1\051\uffa1\055\uffa1" +
    "\056\uffa1\057\uffa1\060\uffa1\001\002\000\004\033\344\001" +
    "\002\000\004\033\uffbc\001\002\000\060\003\uffb3\005\uffb3" +
    "\006\uffb3\011\uffb3\012\uffb3\014\uffb3\016\uffb3\017\uffb3\024" +
    "\uffb3\025\uffb3\027\uffb3\030\uffb3\033\uffb3\042\uffb3\051\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\001\002\000\060\003\231\005\uffae\006\230" +
    "\011\005\012\022\014\226\016\234\017\222\024\221\025" +
    "\052\027\063\030\016\033\064\042\061\051\023\055\006" +
    "\056\010\057\024\060\015\061\051\062\055\063\057\064" +
    "\053\001\002\000\060\003\uffb1\005\uffb1\006\uffb1\011\uffb1" +
    "\012\uffb1\014\uffb1\016\uffb1\017\uffb1\024\uffb1\025\uffb1\027" +
    "\uffb1\030\uffb1\033\uffb1\042\uffb1\051\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\001" +
    "\002\000\004\033\335\001\002\000\004\005\164\001\002" +
    "\000\024\025\052\027\063\033\064\035\uffc5\042\061\061" +
    "\051\062\055\063\057\064\053\001\002\000\004\035\uffbf" +
    "\001\002\000\060\003\uffb2\005\uffb2\006\uffb2\011\uffb2\012" +
    "\uffb2\014\uffb2\016\uffb2\017\uffb2\024\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\033\uffb2\042\uffb2\051\uffb2\055\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\001\002" +
    "\000\004\033\253\001\002\000\004\033\245\001\002\000" +
    "\004\035\uffc2\001\002\000\004\035\uffc1\001\002\000\004" +
    "\035\uffc3\001\002\000\004\035\243\001\002\000\004\064" +
    "\242\001\002\000\006\035\ufff1\036\202\001\002\000\060" +
    "\003\231\005\uffb0\006\230\011\005\012\022\014\226\016" +
    "\234\017\222\024\221\025\052\027\063\030\016\033\064" +
    "\042\061\051\023\055\006\056\010\057\024\060\015\061" +
    "\051\062\055\063\057\064\053\001\002\000\004\005\uffaf" +
    "\001\002\000\022\025\052\027\063\033\064\042\061\061" +
    "\051\062\055\063\057\064\053\001\002\000\004\034\247" +
    "\001\002\000\004\004\044\001\002\000\056\003\231\006" +
    "\230\011\005\012\022\014\226\016\234\017\222\024\221" +
    "\025\052\027\063\030\016\033\064\042\061\051\023\055" +
    "\006\056\010\057\024\060\015\061\051\062\055\063\057" +
    "\064\053\001\002\000\004\005\164\001\002\000\060\003" +
    "\uffc6\005\uffc6\006\uffc6\011\uffc6\012\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\024\uffc6\025\uffc6\027\uffc6\030\uffc6\033\uffc6\042" +
    "\uffc6\051\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\062\uffc6\063\uffc6\064\uffc6\001\002\000\044\011\005\012" +
    "\022\025\052\027\063\030\016\033\064\035\256\042\061" +
    "\051\023\055\006\056\010\057\024\060\015\061\051\062" +
    "\055\063\057\064\053\001\002\000\004\035\uffbd\001\002" +
    "\000\004\035\uffbe\001\002\000\024\025\052\027\063\033" +
    "\064\035\306\042\061\061\051\062\055\063\057\064\053" +
    "\001\002\000\004\035\260\001\002\000\024\025\052\027" +
    "\063\033\064\035\261\042\061\061\051\062\055\063\057" +
    "\064\053\001\002\000\024\025\052\027\063\033\064\034" +
    "\275\042\061\061\051\062\055\063\057\064\053\001\002" +
    "\000\004\035\263\001\002\000\024\025\052\027\063\033" +
    "\064\034\264\042\061\061\051\062\055\063\057\064\053" +
    "\001\002\000\004\004\272\001\002\000\004\034\266\001" +
    "\002\000\004\004\267\001\002\000\056\003\231\006\230" +
    "\011\005\012\022\014\226\016\234\017\222\024\221\025" +
    "\052\027\063\030\016\033\064\042\061\051\023\055\006" +
    "\056\010\057\024\060\015\061\051\062\055\063\057\064" +
    "\053\001\002\000\004\005\271\001\002\000\060\003\uffbb" +
    "\005\uffbb\006\uffbb\011\uffbb\012\uffbb\014\uffbb\016\uffbb\017" +
    "\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb\033\uffbb\042\uffbb" +
    "\051\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\001\002\000\056\003\231\006\230" +
    "\011\005\012\022\014\226\016\234\017\222\024\221\025" +
    "\052\027\063\030\016\033\064\042\061\051\023\055\006" +
    "\056\010\057\024\060\015\061\051\062\055\063\057\064" +
    "\053\001\002\000\004\005\274\001\002\000\060\003\uffb8" +
    "\005\uffb8\006\uffb8\011\uffb8\012\uffb8\014\uffb8\016\uffb8\017" +
    "\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\033\uffb8\042\uffb8" +
    "\051\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\063\uffb8\064\uffb8\001\002\000\004\004\303\001\002" +
    "\000\004\034\277\001\002\000\004\004\300\001\002\000" +
    "\056\003\231\006\230\011\005\012\022\014\226\016\234" +
    "\017\222\024\221\025\052\027\063\030\016\033\064\042" +
    "\061\051\023\055\006\056\010\057\024\060\015\061\051" +
    "\062\055\063\057\064\053\001\002\000\004\005\302\001" +
    "\002\000\060\003\uffb9\005\uffb9\006\uffb9\011\uffb9\012\uffb9" +
    "\014\uffb9\016\uffb9\017\uffb9\024\uffb9\025\uffb9\027\uffb9\030" +
    "\uffb9\033\uffb9\042\uffb9\051\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\001\002\000" +
    "\056\003\231\006\230\011\005\012\022\014\226\016\234" +
    "\017\222\024\221\025\052\027\063\030\016\033\064\042" +
    "\061\051\023\055\006\056\010\057\024\060\015\061\051" +
    "\062\055\063\057\064\053\001\002\000\004\005\305\001" +
    "\002\000\060\003\uffb6\005\uffb6\006\uffb6\011\uffb6\012\uffb6" +
    "\014\uffb6\016\uffb6\017\uffb6\024\uffb6\025\uffb6\027\uffb6\030" +
    "\uffb6\033\uffb6\042\uffb6\051\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\001\002\000" +
    "\024\025\052\027\063\033\064\034\322\042\061\061\051" +
    "\062\055\063\057\064\053\001\002\000\004\035\310\001" +
    "\002\000\024\025\052\027\063\033\064\034\311\042\061" +
    "\061\051\062\055\063\057\064\053\001\002\000\004\004" +
    "\317\001\002\000\004\034\313\001\002\000\004\004\314" +
    "\001\002\000\056\003\231\006\230\011\005\012\022\014" +
    "\226\016\234\017\222\024\221\025\052\027\063\030\016" +
    "\033\064\042\061\051\023\055\006\056\010\057\024\060" +
    "\015\061\051\062\055\063\057\064\053\001\002\000\004" +
    "\005\316\001\002\000\060\003\uffba\005\uffba\006\uffba\011" +
    "\uffba\012\uffba\014\uffba\016\uffba\017\uffba\024\uffba\025\uffba" +
    "\027\uffba\030\uffba\033\uffba\042\uffba\051\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\001\002\000\056\003\231\006\230\011\005\012\022\014" +
    "\226\016\234\017\222\024\221\025\052\027\063\030\016" +
    "\033\064\042\061\051\023\055\006\056\010\057\024\060" +
    "\015\061\051\062\055\063\057\064\053\001\002\000\004" +
    "\005\321\001\002\000\060\003\uffb5\005\uffb5\006\uffb5\011" +
    "\uffb5\012\uffb5\014\uffb5\016\uffb5\017\uffb5\024\uffb5\025\uffb5" +
    "\027\uffb5\030\uffb5\033\uffb5\042\uffb5\051\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\001\002\000\004\004\330\001\002\000\004\034\324\001" +
    "\002\000\004\004\325\001\002\000\056\003\231\006\230" +
    "\011\005\012\022\014\226\016\234\017\222\024\221\025" +
    "\052\027\063\030\016\033\064\042\061\051\023\055\006" +
    "\056\010\057\024\060\015\061\051\062\055\063\057\064" +
    "\053\001\002\000\004\005\327\001\002\000\060\003\uffb7" +
    "\005\uffb7\006\uffb7\011\uffb7\012\uffb7\014\uffb7\016\uffb7\017" +
    "\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\033\uffb7\042\uffb7" +
    "\051\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\001\002\000\056\003\231\006\230" +
    "\011\005\012\022\014\226\016\234\017\222\024\221\025" +
    "\052\027\063\030\016\033\064\042\061\051\023\055\006" +
    "\056\010\057\024\060\015\061\051\062\055\063\057\064" +
    "\053\001\002\000\004\005\332\001\002\000\060\003\uffb4" +
    "\005\uffb4\006\uffb4\011\uffb4\012\uffb4\014\uffb4\016\uffb4\017" +
    "\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\033\uffb4\042\uffb4" +
    "\051\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\001\002\000\004\035\uffc4\001\002" +
    "\000\030\002\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2\030" +
    "\uffa2\051\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\001\002" +
    "\000\022\025\052\027\063\033\064\042\061\061\051\062" +
    "\055\063\057\064\053\001\002\000\004\034\337\001\002" +
    "\000\004\004\044\001\002\000\056\003\231\006\230\011" +
    "\005\012\022\014\226\016\234\017\222\024\221\025\052" +
    "\027\063\030\016\033\064\042\061\051\023\055\006\056" +
    "\010\057\024\060\015\061\051\062\055\063\057\064\053" +
    "\001\002\000\004\005\164\001\002\000\060\003\uffc7\005" +
    "\uffc7\006\uffc7\011\uffc7\012\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\024\uffc7\025\uffc7\027\uffc7\030\uffc7\033\uffc7\042\uffc7\051" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\001\002\000\004\005\uffad\001\002\000" +
    "\022\025\052\027\063\033\064\042\061\061\051\062\055" +
    "\063\057\064\053\001\002\000\004\034\346\001\002\000" +
    "\004\035\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\024\002\011\022\010\023\012\024\020\026" +
    "\006\031\017\032\024\033\003\034\016\001\001\000\050" +
    "\003\231\004\224\005\232\007\222\010\223\011\226\012" +
    "\237\013\064\014\055\015\046\016\061\017\047\020\234" +
    "\021\045\022\240\024\020\026\236\035\235\037\217\001" +
    "\001\000\004\036\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\010\023\172\024\020\026\171\031\017\032\175\033\003" +
    "\034\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\165\024\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\160\001\001\000" +
    "\006\022\154\024\020\001\001\000\020\013\064\014\055" +
    "\015\046\016\061\017\047\020\057\021\045\001\001\000" +
    "\002\001\001\000\004\036\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\030\024\020\027\032\001" +
    "\001\000\002\001\001\000\006\022\034\024\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\030\024\020\027\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\030\024" +
    "\020\027\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\055" +
    "\015\103\021\071\001\001\000\002\001\001\000\010\014" +
    "\055\015\072\021\071\001\001\000\020\013\064\014\055" +
    "\015\046\016\061\017\047\020\066\021\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\064\014\055\015\046\016\061\017\047" +
    "\020\100\021\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\105\024\020\001\001\000\002\001\001\000\006" +
    "\022\107\024\020\001\001\000\002\001\001\000\022\013" +
    "\064\014\055\015\046\016\061\017\047\020\112\021\045" +
    "\030\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\013\064\014\055\015\046\016\061\017\047\020\112" +
    "\021\045\030\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\055" +
    "\015\046\016\061\017\151\021\071\001\001\000\014\014" +
    "\055\015\046\016\061\017\150\021\071\001\001\000\014" +
    "\014\055\015\046\016\061\017\147\021\071\001\001\000" +
    "\014\014\055\015\046\016\061\017\146\021\071\001\001" +
    "\000\014\014\055\015\046\016\061\017\145\021\071\001" +
    "\001\000\014\014\055\015\046\016\061\017\144\021\071" +
    "\001\001\000\014\014\055\015\046\016\061\017\143\021" +
    "\071\001\001\000\014\014\055\015\046\016\061\017\142" +
    "\021\071\001\001\000\014\014\055\015\046\016\061\017" +
    "\141\021\071\001\001\000\014\014\055\015\046\016\061" +
    "\017\140\021\071\001\001\000\014\014\055\015\046\016" +
    "\061\017\137\021\071\001\001\000\014\014\055\015\046" +
    "\016\061\017\136\021\071\001\001\000\014\014\055\015" +
    "\046\016\061\017\135\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\064" +
    "\014\055\015\046\016\061\017\047\020\153\021\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\064\014\055\015\046\016\061\017\047\020" +
    "\157\021\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\167" +
    "\024\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\030\024\020\027\203\001\001" +
    "\000\020\013\064\014\055\015\046\016\061\017\047\020" +
    "\202\021\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\211\024" +
    "\020\025\207\001\001\000\004\037\216\001\001\000\010" +
    "\022\211\024\020\025\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\211\024\020\025\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\231\004\224\005\232\007\222\010" +
    "\223\011\342\012\237\013\064\014\055\015\046\016\061" +
    "\017\047\020\234\021\045\022\240\024\020\026\236\035" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\333\001\001\000\020\013\064\014\055\015\046\016" +
    "\061\017\047\020\332\021\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\231\004\224\005\232\007\222\010\223\011\243\012\237" +
    "\013\064\014\055\015\046\016\061\017\047\020\234\021" +
    "\045\022\240\024\020\026\236\035\235\001\001\000\002" +
    "\001\001\000\020\013\064\014\055\015\046\016\061\017" +
    "\047\020\245\021\045\001\001\000\002\001\001\000\004" +
    "\036\247\001\001\000\046\003\231\004\224\005\232\007" +
    "\222\010\223\011\250\012\237\013\064\014\055\015\046" +
    "\016\061\017\047\020\234\021\045\022\240\024\020\026" +
    "\236\035\235\001\001\000\004\037\251\001\001\000\002" +
    "\001\001\000\030\006\256\013\064\014\055\015\046\016" +
    "\061\017\047\020\253\021\045\022\240\024\020\026\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\064\014\055\015\046\016\061\017\047\020\306\021\045" +
    "\001\001\000\002\001\001\000\020\013\064\014\055\015" +
    "\046\016\061\017\047\020\261\021\045\001\001\000\020" +
    "\013\064\014\055\015\046\016\061\017\047\020\275\021" +
    "\045\001\001\000\002\001\001\000\020\013\064\014\055" +
    "\015\046\016\061\017\047\020\264\021\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\231\004\224\005\232\007\222\010\223\011\267\012" +
    "\237\013\064\014\055\015\046\016\061\017\047\020\234" +
    "\021\045\022\240\024\020\026\236\035\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\231\004\224" +
    "\005\232\007\222\010\223\011\272\012\237\013\064\014" +
    "\055\015\046\016\061\017\047\020\234\021\045\022\240" +
    "\024\020\026\236\035\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\231\004\224\005\232\007\222\010" +
    "\223\011\300\012\237\013\064\014\055\015\046\016\061" +
    "\017\047\020\234\021\045\022\240\024\020\026\236\035" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\231\004\224\005\232\007\222\010\223\011\303\012" +
    "\237\013\064\014\055\015\046\016\061\017\047\020\234" +
    "\021\045\022\240\024\020\026\236\035\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\064\014\055" +
    "\015\046\016\061\017\047\020\322\021\045\001\001\000" +
    "\002\001\001\000\020\013\064\014\055\015\046\016\061" +
    "\017\047\020\311\021\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\231\004\224" +
    "\005\232\007\222\010\223\011\314\012\237\013\064\014" +
    "\055\015\046\016\061\017\047\020\234\021\045\022\240" +
    "\024\020\026\236\035\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\231\004\224\005\232\007\222" +
    "\010\223\011\317\012\237\013\064\014\055\015\046\016" +
    "\061\017\047\020\234\021\045\022\240\024\020\026\236" +
    "\035\235\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\231\004\224\005\232\007\222\010\223\011\325\012" +
    "\237\013\064\014\055\015\046\016\061\017\047\020\234" +
    "\021\045\022\240\024\020\026\236\035\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\003\231\004\224" +
    "\005\232\007\222\010\223\011\330\012\237\013\064\014" +
    "\055\015\046\016\061\017\047\020\234\021\045\022\240" +
    "\024\020\026\236\035\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\064\014\055\015\046\016\061\017\047\020\335\021" +
    "\045\001\001\000\002\001\001\000\004\036\337\001\001" +
    "\000\046\003\231\004\224\005\232\007\222\010\223\011" +
    "\340\012\237\013\064\014\055\015\046\016\061\017\047" +
    "\020\234\021\045\022\240\024\020\026\236\035\235\001" +
    "\001\000\004\037\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\064\014\055\015\046\016\061\017" +
    "\047\020\344\021\045\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        Main.report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        Main.report_error("Unexpected token", cur_token);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        Main.report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fields ::= type ID SEMI 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.struct(null, i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fields ::= type ID SEMI fields 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f.addField(i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fields ::= error 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fields ::= error fields 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct ::= STRUCT lkey fields rkey 
            {
              complexType.struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // struct ::= struct lkey error rkey 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= CHAR 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOL 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= STRING 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= LBRAC expr RBRAC type 
            {
              complexType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.array(null, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= MULT type 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.pointer(null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= struct 
            {
              complexType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct s = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= LBRAC error RBRAC type 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typedecl ::= TYPE ID type 
            {
              typedecl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= type ID 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= type ID ASS expr 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= CONST type ID ASS expr 
            {
              decl_node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		terminal_node c = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(c.left, t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arglist ::= expr COMMA arglist 
            {
              arglist_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arglist_node(e, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arglist ::= expr 
            {
              arglist_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arglist_node(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arglist ::= 
            {
              arglist_node RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ref ::= ID 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new identifier_ref_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ref ::= ref LBRAC expr RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new displ_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ref ::= ref DOT ID 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new field_node(r, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ref ::= ID LPAREN arglist RPAREN 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node rp = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new call_node(i, l, rp.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ref ::= ref LBRAC error RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ref ::= ref DOT error 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= INTLIT 
            {
              literal_expr_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Integer> i = (terminal_node<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literal ::= CHARLIT 
            {
              literal_expr_node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Integer> c = (terminal_node<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literal ::= BOOLLIT 
            {
              literal_expr_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Boolean> b = (terminal_node<Boolean>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atom_expr ::= literal 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal_expr_node e = (literal_expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atom_expr ::= LPAREN expr RPAREN 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // atom_expr ::= ref 
            {
              expr_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // atom_expr ::= INPUT LPAREN RPAREN 
            {
              expr_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node i = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node r = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(new input_node(i.left, r.right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atom_expr ::= LPAREN error RPAREN 
            {
              expr_node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unary_expr ::= atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unary_expr ::= NOT atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unary_expr ::= NEG atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NEG, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binary_expr ::= unary_expr 
            {
              binaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		unaryOp_node e = (unaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binary_expr ::= binary_expr MOD binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.MOD, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binary_expr ::= binary_expr DIV binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.DIV, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binary_expr ::= binary_expr MULT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.TIMES, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binary_expr ::= binary_expr PLUS binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.PLUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binary_expr ::= binary_expr NEG binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEG, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binary_expr ::= binary_expr LT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binary_expr ::= binary_expr GT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binary_expr ::= binary_expr LEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binary_expr ::= binary_expr GEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binary_expr ::= binary_expr EQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.EQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binary_expr ::= binary_expr NEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binary_expr ::= binary_expr AND binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.AND, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binary_expr ::= binary_expr OR binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.OR, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assign ::= ref ASS expr 
            {
              assign_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new assign_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= binary_expr 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= assign 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		assign_node e = (assign_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lkey ::= LKEY 
            {
              Object RESULT =null;
		 symbolTable.enterBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lkey",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rkey ::= RKEY 
            {
              Object RESULT =null;
		 symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rkey",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ifstmt ::= IF LPAREN expr RPAREN lkey stmts rkey 
            {
              ifstmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ifstmt_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILE LPAREN expr RPAREN lkey stmts rkey 
            {
              while_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new while_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return ::= RETURN 
            {
              return_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node r = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new return_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // return ::= RETURN expr 
            {
              return_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		terminal_node r = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new return_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmt ::= decl 
            {
              stmt_node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmt ::= expr 
            {
              stmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmt ::= return 
            {
              stmt_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		return_node r = (return_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmt ::= PUTCHAR LPAREN expr RPAREN 
            {
              stmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new stmt_node(new print_node(e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmt ::= error 
            {
              stmt_node RESULT =null;
		 RESULT = new stmt_node(new node()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // forInit ::= decl 
            {
              node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forInit ::= expr 
            {
              node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInit",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // for ::= FOR 
            {
              Object RESULT =null;
		 symbolTable.enterBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // forstmt ::= for LPAREN forInit SEMI expr SEMI expr RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		node init = (node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		expr_node cond = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node incr = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(init, cond, incr, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // forstmt ::= for LPAREN SEMI expr SEMI expr RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		expr_node cond = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node incr = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(null, cond, incr, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // forstmt ::= for LPAREN forInit SEMI SEMI expr RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		node init = (node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int incrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node incr = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(init, null, incr, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // forstmt ::= for LPAREN forInit SEMI expr SEMI RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		node init = (node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		expr_node cond = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(init, cond, null, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // forstmt ::= for LPAREN SEMI SEMI expr RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int incrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int incrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node incr = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(null, null, incr, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // forstmt ::= for LPAREN forInit SEMI SEMI RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		node init = (node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(init, null, null, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // forstmt ::= for LPAREN SEMI expr SEMI RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		expr_node cond = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(null, cond, null, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // forstmt ::= for LPAREN SEMI SEMI RPAREN LKEY stmts RKEY 
            {
              for_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new for_node(null, null, null, s); symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // blockstmt ::= ifstmt 
            {
              stmt_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifstmt_node i = (ifstmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // blockstmt ::= while 
            {
              stmt_node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		while_node w = (while_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // blockstmt ::= forstmt 
            {
              stmt_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		for_node f = (for_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmts ::= stmt SEMI 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new stmts_node(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmts ::= stmt SEMI stmts 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(s, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmts ::= blockstmt 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmts ::= blockstmt stmts 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // argdecls ::= type ID COMMA argdecls 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, l, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // argdecls ::= type ID 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, null, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // argdecls ::= OUT type ID COMMA argdecls 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, l, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // argdecls ::= OUT type ID 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, null, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // argdecls ::= 
            {
              argDeclList_node RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // funcsig ::= type ID LPAREN argdecls RPAREN 
            {
              complexType.funcsig RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.funcsig(t, i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcsig",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funcsig ::= VOID ID LPAREN argdecls RPAREN 
            {
              complexType.funcsig RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.funcsig(null, i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcsig",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fundecl ::= funcsig SEMI 
            {
              fundecl_node RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType.funcsig sig = (complexType.funcsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new fundecl_node(sig, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // fundecl ::= funcsig 
            {
              fundecl_node RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.funcsig sig = (complexType.funcsig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new fundecl_node(sig, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundecl",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // partfundef ::= fundecl lkey 
            {
              fundecl_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fundecl_node f = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 f.addArgs(); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("partfundef",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fundef ::= partfundef stmts rkey 
            {
              fundecl_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		fundecl_node f = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 f.setStmts(s); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundef",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fundef ::= partfundef rkey 
            {
              fundecl_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fundecl_node f = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 f.setStmts(null); RESULT = f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundef",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // prog ::= fundecl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // prog ::= prog fundecl 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // prog ::= fundef 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // prog ::= prog fundef 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // prog ::= typedecl SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // prog ::= prog typedecl 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // prog ::= decl SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // prog ::= prog decl SEMI 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
