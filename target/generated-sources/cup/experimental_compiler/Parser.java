
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package experimental_compiler;

import java_cup.runtime.ComplexSymbolFactory.*;
import java_cup.runtime.*;
import java.util.HashMap;
import arbol.*;
import arbol.ref.*;
import arbol.val.*;
import arbol.type.*;
import arbol.flow.*;
import arbol.fun.*;
import datos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\022\005\000\002\022" +
    "\006\000\002\022\003\000\002\022\004\000\002\021\006" +
    "\000\002\021\006\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\006\000\002\017\004\000\002" +
    "\017\003\000\002\017\006\000\002\020\005\000\002\023" +
    "\004\000\002\023\006\000\002\023\007\000\002\025\005" +
    "\000\002\025\003\000\002\025\002\000\002\016\003\000" +
    "\002\016\006\000\002\016\005\000\002\016\006\000\002" +
    "\016\006\000\002\016\005\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\012\003" +
    "\000\002\012\005\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\010\005\000\002\015\003\000\002" +
    "\015\003\000\002\033\003\000\002\034\003\000\002\004" +
    "\011\000\002\003\011\000\002\032\003\000\002\032\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\004\000\002\006\005\000\002\006\003\000\002\006" +
    "\004\000\002\024\006\000\002\024\004\000\002\024\007" +
    "\000\002\024\005\000\002\024\002\000\002\026\007\000" +
    "\002\026\007\000\002\027\004\000\002\027\003\000\002" +
    "\030\004\000\002\031\005\000\002\031\004\000\002\002" +
    "\003\000\002\002\004\000\002\002\003\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\024\007\025\011\005\012\021\013\013\025" +
    "\016\045\022\051\006\052\023\053\014\001\002\000\046" +
    "\003\223\005\155\006\215\011\005\012\021\014\216\016" +
    "\214\024\060\025\016\027\061\036\053\045\022\051\006" +
    "\052\023\053\014\054\046\055\056\056\051\001\002\000" +
    "\004\004\043\001\002\000\032\002\ufffa\007\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\025\ufffa\031\ufffa\045\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\056\ufffa\001\002\000\004\031\177\001\002" +
    "\000\004\056\171\001\002\000\026\002\165\007\025\011" +
    "\005\012\021\013\013\025\016\045\022\051\006\052\023" +
    "\053\014\001\002\000\004\031\162\001\002\000\004\056" +
    "\160\001\002\000\032\002\ufff8\007\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\025\ufff8\031\ufff8\045\ufff8\051\ufff8\052\ufff8\053" +
    "\ufff8\056\ufff8\001\002\000\026\002\uffaf\007\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\025\uffaf\045\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\001\002\000\016\011\005\025\016\045\022\051\006" +
    "\052\023\053\014\001\002\000\032\002\uffb5\004\uffb5\007" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\025\uffb5\031\156\045\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\001\002\000\034\002\ufff5\004" +
    "\043\007\ufff5\011\ufff5\012\ufff5\013\ufff5\025\ufff5\031\ufff5" +
    "\045\ufff5\051\ufff5\052\ufff5\053\ufff5\056\ufff5\001\002\000" +
    "\016\011\005\025\016\045\022\051\006\052\023\053\014" +
    "\001\002\000\020\003\052\024\060\027\061\036\053\054" +
    "\046\055\056\056\051\001\002\000\032\002\ufff9\007\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\025\ufff9\031\ufff9\045\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\056\ufff9\001\002\000\030\002\uffb1" +
    "\004\043\007\uffb1\011\uffb1\012\uffb1\013\uffb1\025\uffb1\045" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002\000\004\056\026" +
    "\001\002\000\004\027\027\001\002\000\022\010\031\011" +
    "\005\025\016\030\uffb9\045\022\051\006\052\023\053\014" +
    "\001\002\000\004\056\040\001\002\000\016\011\005\025" +
    "\016\045\022\051\006\052\023\053\014\001\002\000\004" +
    "\030\033\001\002\000\032\002\uffb7\004\uffb7\007\uffb7\011" +
    "\uffb7\012\uffb7\013\uffb7\025\uffb7\031\uffb7\045\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\001\002\000\004\056\035\001\002\000" +
    "\006\030\uffba\047\036\001\002\000\022\010\031\011\005" +
    "\025\016\030\uffb9\045\022\051\006\052\023\053\014\001" +
    "\002\000\004\030\uffbb\001\002\000\006\030\uffbc\047\041" +
    "\001\002\000\022\010\031\011\005\025\016\030\uffb9\045" +
    "\022\051\006\052\023\053\014\001\002\000\004\030\uffbd" +
    "\001\002\000\046\003\uffcd\005\uffcd\006\uffcd\011\uffcd\012" +
    "\uffcd\014\uffcd\016\uffcd\024\uffcd\025\uffcd\027\uffcd\036\uffcd" +
    "\045\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\046\003\uffb4\005\uffb4\006\uffb4\011\uffb4" +
    "\012\uffb4\014\uffb4\016\uffb4\024\uffb4\025\uffb4\027\uffb4\036" +
    "\uffb4\045\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\001\002\000\050\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\030\uffe2\031\uffe2\032\144\034\uffe2\035\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\071\046" +
    "\uffe2\047\uffe2\050\072\001\002\000\042\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\030\uffe6\031\uffe6\034\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6" +
    "\047\uffe6\001\002\000\042\023\117\024\123\025\115\026" +
    "\121\030\uffcf\031\uffcf\034\114\035\126\037\124\040\122" +
    "\041\127\042\125\043\120\044\116\046\uffcf\047\uffcf\001" +
    "\002\000\042\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0" +
    "\031\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\046\uffe0\047\uffe0\001\002\000\052" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\106\030\uffec\031" +
    "\uffec\032\uffec\034\uffec\035\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050" +
    "\uffec\001\002\000\004\046\104\001\002\000\012\027\061" +
    "\054\046\055\056\056\051\001\002\000\042\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\046" +
    "\uffe4\047\uffe4\001\002\000\004\046\101\001\002\000\042" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\034" +
    "\uffe5\035\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\047\uffe5\001\002\000\042\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\034\uffdd\035\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\046" +
    "\uffdd\047\uffdd\001\002\000\012\027\061\054\046\055\056" +
    "\056\051\001\002\000\020\003\063\024\060\027\061\036" +
    "\053\054\046\055\056\056\051\001\002\000\012\030\uffce" +
    "\031\uffce\046\uffce\047\uffce\001\002\000\004\030\066\001" +
    "\002\000\004\030\065\001\002\000\042\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\031\uffe3\034\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\046\uffe3" +
    "\047\uffe3\001\002\000\042\023\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\034\uffe1\035\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\043\uffe1\044\uffe1\046\uffe1\047\uffe1\001" +
    "\002\000\042\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde" +
    "\031\uffde\034\uffde\035\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\046\uffde\047\uffde\001\002\000\046" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\034" +
    "\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\071\046\uffe2\047\uffe2\050\072\001\002\000" +
    "\020\003\075\024\060\027\061\036\053\054\046\055\056" +
    "\056\051\001\002\000\006\003\074\056\073\001\002\000" +
    "\050\023\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea" +
    "\032\uffea\034\uffea\035\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\001\002\000\050\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\001\002\000\004\046\100\001\002\000\004" +
    "\046\077\001\002\000\050\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\001\002\000\050\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000\016\011" +
    "\005\025\016\045\022\051\006\052\023\053\014\001\002" +
    "\000\032\002\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\025" +
    "\ufff7\031\ufff7\045\ufff7\051\ufff7\052\ufff7\053\ufff7\056\ufff7" +
    "\001\002\000\042\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\042\uffdf\043\uffdf\044\uffdf\046\uffdf\047\uffdf\001\002\000" +
    "\016\011\005\025\016\045\022\051\006\052\023\053\014" +
    "\001\002\000\032\002\ufff4\007\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\025\ufff4\031\ufff4\045\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\056\ufff4\001\002\000\020\024\060\027\061\030\uffed\036" +
    "\053\054\046\055\056\056\051\001\002\000\004\030\113" +
    "\001\002\000\006\030\uffee\047\111\001\002\000\020\024" +
    "\060\027\061\030\uffed\036\053\054\046\055\056\056\051" +
    "\001\002\000\004\030\uffef\001\002\000\050\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\034\uffe9" +
    "\035\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000\016" +
    "\024\060\027\061\036\053\054\046\055\056\056\051\001" +
    "\002\000\016\024\060\027\061\036\053\054\046\055\056" +
    "\056\051\001\002\000\016\024\060\027\061\036\053\054" +
    "\046\055\056\056\051\001\002\000\016\024\060\027\061" +
    "\036\053\054\046\055\056\056\051\001\002\000\016\024" +
    "\060\027\061\036\053\054\046\055\056\056\051\001\002" +
    "\000\016\024\060\027\061\036\053\054\046\055\056\056" +
    "\051\001\002\000\016\024\060\027\061\036\053\054\046" +
    "\055\056\056\051\001\002\000\016\024\060\027\061\036" +
    "\053\054\046\055\056\056\051\001\002\000\016\024\060" +
    "\027\061\036\053\054\046\055\056\056\051\001\002\000" +
    "\016\024\060\027\061\036\053\054\046\055\056\056\051" +
    "\001\002\000\016\024\060\027\061\036\053\054\046\055" +
    "\056\056\051\001\002\000\016\024\060\027\061\036\053" +
    "\054\046\055\056\056\051\001\002\000\042\023\117\024" +
    "\123\025\115\026\121\030\uffd6\031\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\046" +
    "\uffd6\047\uffd6\001\002\000\042\023\117\024\123\025\115" +
    "\026\121\030\uffd1\031\uffd1\034\114\035\uffd1\037\124\040" +
    "\122\041\127\042\125\043\120\044\116\046\uffd1\047\uffd1" +
    "\001\002\000\042\023\117\024\123\025\115\026\121\030" +
    "\uffd5\031\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\001\002\000" +
    "\042\023\117\024\123\025\115\026\121\030\uffd8\031\uffd8" +
    "\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\044\uffd8\046\uffd8\047\uffd8\001\002\000\042\023\uffd9" +
    "\024\uffd9\025\115\026\121\030\uffd9\031\uffd9\034\uffd9\035" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\046\uffd9\047\uffd9\001\002\000\042\023\117\024\123\025" +
    "\115\026\121\030\uffd7\031\uffd7\034\uffd7\035\uffd7\037\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047" +
    "\uffd7\001\002\000\042\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\047\uffdc\001\002" +
    "\000\042\023\117\024\123\025\115\026\121\030\uffd4\031" +
    "\uffd4\034\uffd4\035\uffd4\037\124\040\122\041\127\042\125" +
    "\043\uffd4\044\uffd4\046\uffd4\047\uffd4\001\002\000\042\023" +
    "\uffda\024\uffda\025\115\026\121\030\uffda\031\uffda\034\uffda" +
    "\035\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\046\uffda\047\uffda\001\002\000\042\023\117\024\123" +
    "\025\115\026\121\030\uffd3\031\uffd3\034\uffd3\035\uffd3\037" +
    "\124\040\122\041\127\042\125\043\uffd3\044\uffd3\046\uffd3" +
    "\047\uffd3\001\002\000\042\023\uffdb\024\uffdb\025\uffdb\026" +
    "\121\030\uffdb\031\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\047\uffdb\001" +
    "\002\000\042\023\117\024\123\025\115\026\121\030\uffd2" +
    "\031\uffd2\034\uffd2\035\uffd2\037\124\040\122\041\127\042" +
    "\125\043\120\044\116\046\uffd2\047\uffd2\001\002\000\016" +
    "\024\060\027\061\036\053\054\046\055\056\056\051\001" +
    "\002\000\012\030\uffd0\031\uffd0\046\uffd0\047\uffd0\001\002" +
    "\000\004\056\147\001\002\000\004\032\150\001\002\000" +
    "\016\024\060\027\061\036\053\054\046\055\056\056\051" +
    "\001\002\000\004\031\ufff0\001\002\000\004\003\153\001" +
    "\002\000\004\005\155\001\002\000\034\002\ufffb\004\ufffb" +
    "\007\ufffb\011\ufffb\012\ufffb\013\ufffb\025\ufffb\031\ufffb\045" +
    "\ufffb\051\ufffb\052\ufffb\053\ufffb\056\ufffb\001\002\000\060" +
    "\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\024\uffcc\025\uffcc" +
    "\027\uffcc\031\uffcc\036\uffcc\045\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000\030\002\uffb6" +
    "\004\uffb6\007\uffb6\011\uffb6\012\uffb6\013\uffb6\025\uffb6\045" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\032\002\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\013\ufff6\025\ufff6\031\ufff6\045" +
    "\ufff6\051\ufff6\052\ufff6\053\ufff6\056\ufff6\001\002\000\016" +
    "\011\005\025\016\045\022\051\006\052\023\053\014\001" +
    "\002\000\030\002\ufff3\007\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\025\ufff3\031\ufff3\045\ufff3\051\ufff3\052\ufff3\053\ufff3\001" +
    "\002\000\026\002\uffad\007\uffad\011\uffad\012\uffad\013\uffad" +
    "\025\uffad\045\uffad\051\uffad\052\uffad\053\uffad\001\002\000" +
    "\004\031\170\001\002\000\026\002\uffac\007\uffac\011\uffac" +
    "\012\uffac\013\uffac\025\uffac\045\uffac\051\uffac\052\uffac\053" +
    "\uffac\001\002\000\004\002\001\001\002\000\026\002\uffae" +
    "\007\uffae\011\uffae\012\uffae\013\uffae\025\uffae\045\uffae\051" +
    "\uffae\052\uffae\053\uffae\001\002\000\030\002\uffb0\004\043" +
    "\007\uffb0\011\uffb0\012\uffb0\013\uffb0\025\uffb0\045\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\001\002\000\026\002\uffaa\007\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\025\uffaa\045\uffaa\051\uffaa\052" +
    "\uffaa\053\uffaa\001\002\000\010\027\172\031\ufff2\032\173" +
    "\001\002\000\022\010\031\011\005\025\016\030\uffb9\045" +
    "\022\051\006\052\023\053\014\001\002\000\016\024\060" +
    "\027\061\036\053\054\046\055\056\056\051\001\002\000" +
    "\004\031\ufff1\001\002\000\004\030\176\001\002\000\032" +
    "\002\uffb8\004\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8\025" +
    "\uffb8\031\uffb8\045\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002" +
    "\000\026\002\uffab\007\uffab\011\uffab\012\uffab\013\uffab\025" +
    "\uffab\045\uffab\051\uffab\052\uffab\053\uffab\001\002\000\020" +
    "\003\203\011\005\025\016\045\022\051\006\052\023\053" +
    "\014\001\002\000\004\005\155\001\002\000\004\056\205" +
    "\001\002\000\022\003\203\005\ufffe\011\005\025\016\045" +
    "\022\051\006\052\023\053\014\001\002\000\004\005\ufffd" +
    "\001\002\000\004\031\206\001\002\000\022\003\203\005" +
    "\000\011\005\025\016\045\022\051\006\052\023\053\014" +
    "\001\002\000\004\005\uffff\001\002\000\034\002\ufffc\004" +
    "\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\025\ufffc\031\ufffc" +
    "\045\ufffc\051\ufffc\052\ufffc\053\ufffc\056\ufffc\001\002\000" +
    "\004\031\uffc6\001\002\000\004\031\uffc7\001\002\000\004" +
    "\056\250\001\002\000\004\027\242\001\002\000\020\024" +
    "\060\027\061\031\uffc9\036\053\054\046\055\056\056\051" +
    "\001\002\000\004\027\233\001\002\000\046\003\223\005" +
    "\uffbf\006\215\011\005\012\021\014\216\016\214\024\060" +
    "\025\016\027\061\036\053\045\022\051\006\052\023\053" +
    "\014\054\046\055\056\056\051\001\002\000\004\005\155" +
    "\001\002\000\046\003\uffc2\005\uffc2\006\uffc2\011\uffc2\012" +
    "\uffc2\014\uffc2\016\uffc2\024\uffc2\025\uffc2\027\uffc2\036\uffc2" +
    "\045\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\001\002\000\046\003\uffc3\005\uffc3\006\uffc3\011\uffc3" +
    "\012\uffc3\014\uffc3\016\uffc3\024\uffc3\025\uffc3\027\uffc3\036" +
    "\uffc3\045\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\001\002\000\004\031\uffc4\001\002\000\004\031" +
    "\uffc5\001\002\000\004\031\227\001\002\000\026\002\uffb2" +
    "\007\uffb2\011\uffb2\012\uffb2\013\uffb2\025\uffb2\045\uffb2\051" +
    "\uffb2\052\uffb2\053\uffb2\001\002\000\046\003\223\005\uffc1" +
    "\006\215\011\005\012\021\014\216\016\214\024\060\025" +
    "\016\027\061\036\053\045\022\051\006\052\023\053\014" +
    "\054\046\055\056\056\051\001\002\000\004\005\uffc0\001" +
    "\002\000\026\002\uffb3\007\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\025\uffb3\045\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000" +
    "\004\005\uffbe\001\002\000\016\024\060\027\061\036\053" +
    "\054\046\055\056\056\051\001\002\000\004\030\235\001" +
    "\002\000\004\004\043\001\002\000\044\003\223\006\215" +
    "\011\005\012\021\014\216\016\214\024\060\025\016\027" +
    "\061\036\053\045\022\051\006\052\023\053\014\054\046" +
    "\055\056\056\051\001\002\000\004\005\155\001\002\000" +
    "\046\003\uffcb\005\uffcb\006\uffcb\011\uffcb\012\uffcb\014\uffcb" +
    "\016\uffcb\024\uffcb\025\uffcb\027\uffcb\036\uffcb\045\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002" +
    "\000\004\031\uffc8\001\002\000\016\024\060\027\061\036" +
    "\053\054\046\055\056\056\051\001\002\000\004\030\244" +
    "\001\002\000\004\004\043\001\002\000\044\003\223\006" +
    "\215\011\005\012\021\014\216\016\214\024\060\025\016" +
    "\027\061\036\053\045\022\051\006\052\023\053\014\054" +
    "\046\055\056\056\051\001\002\000\004\005\155\001\002" +
    "\000\046\003\uffca\005\uffca\006\uffca\011\uffca\012\uffca\014" +
    "\uffca\016\uffca\024\uffca\025\uffca\027\uffca\036\uffca\045\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\001" +
    "\002\000\006\031\ufff2\032\173\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\024\002\010\017\007\020\011\021\017\023" +
    "\006\026\016\027\023\030\003\031\014\001\001\000\044" +
    "\003\220\004\221\005\216\006\217\007\224\010\061\011" +
    "\053\012\047\013\056\014\046\015\210\016\044\017\212" +
    "\021\017\023\211\032\223\034\225\001\001\000\004\033" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\017\007\020\163\021\017\023\162\026" +
    "\016\027\166\030\003\031\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\156\021\017\001\001\000\002\001\001\000\004" +
    "\033\151\001\001\000\006\017\145\021\017\001\001\000" +
    "\020\010\061\011\053\012\047\013\056\014\046\015\054" +
    "\016\044\001\001\000\002\001\001\000\004\033\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\027" +
    "\021\017\024\031\001\001\000\002\001\001\000\006\017" +
    "\033\021\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\027\021" +
    "\017\024\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\027\021\017\024\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\053\012\102" +
    "\016\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\053\012\066" +
    "\016\067\001\001\000\020\010\061\011\053\012\047\013" +
    "\056\014\046\015\063\016\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\061\011\053\012\047\013\056\014\046\015\075\016" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\101\021\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\104\021" +
    "\017\001\001\000\002\001\001\000\022\010\061\011\053" +
    "\012\047\013\056\014\046\015\107\016\044\025\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\061" +
    "\011\053\012\047\013\056\014\046\015\107\016\044\025" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\053\012\047\013\056\014\142\016\067\001\001\000" +
    "\014\011\053\012\047\013\056\014\141\016\067\001\001" +
    "\000\014\011\053\012\047\013\056\014\140\016\067\001" +
    "\001\000\014\011\053\012\047\013\056\014\137\016\067" +
    "\001\001\000\014\011\053\012\047\013\056\014\136\016" +
    "\067\001\001\000\014\011\053\012\047\013\056\014\135" +
    "\016\067\001\001\000\014\011\053\012\047\013\056\014" +
    "\134\016\067\001\001\000\014\011\053\012\047\013\056" +
    "\014\133\016\067\001\001\000\014\011\053\012\047\013" +
    "\056\014\132\016\067\001\001\000\014\011\053\012\047" +
    "\013\056\014\131\016\067\001\001\000\014\011\053\012" +
    "\047\013\056\014\130\016\067\001\001\000\014\011\053" +
    "\012\047\013\056\014\127\016\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\010\061\011\053\012" +
    "\047\013\056\014\046\015\144\016\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\010" +
    "\061\011\053\012\047\013\056\014\046\015\150\016\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\160\021\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\027\021\017\024\174\001\001\000\020\010" +
    "\061\011\053\012\047\013\056\014\046\015\173\016\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\201\021\017\022\200" +
    "\001\001\000\004\034\207\001\001\000\002\001\001\000" +
    "\010\017\201\021\017\022\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\201\021\017\022\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\061\011\053\012\047\013\056\014\046\015\240" +
    "\016\044\001\001\000\002\001\001\000\042\003\220\004" +
    "\221\005\216\006\231\007\224\010\061\011\053\012\047" +
    "\013\056\014\046\015\210\016\044\017\212\021\017\023" +
    "\211\032\223\001\001\000\004\034\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\220" +
    "\004\221\005\216\006\227\007\224\010\061\011\053\012" +
    "\047\013\056\014\046\015\210\016\044\017\212\021\017" +
    "\023\211\032\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\061\011\053\012\047" +
    "\013\056\014\046\015\233\016\044\001\001\000\002\001" +
    "\001\000\004\033\235\001\001\000\042\003\220\004\221" +
    "\005\216\006\236\007\224\010\061\011\053\012\047\013" +
    "\056\014\046\015\210\016\044\017\212\021\017\023\211" +
    "\032\223\001\001\000\004\034\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\061\011\053\012\047" +
    "\013\056\014\046\015\242\016\044\001\001\000\002\001" +
    "\001\000\004\033\244\001\001\000\042\003\220\004\221" +
    "\005\216\006\245\007\224\010\061\011\053\012\047\013" +
    "\056\014\046\015\210\016\044\017\212\021\017\023\211" +
    "\032\223\001\001\000\004\034\246\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        Main.report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        Main.report_error("Unexpected token", cur_token);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        Main.report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fields ::= type ID SEMI 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.struct(null, i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fields ::= type ID SEMI fields 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f.addField(i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fields ::= error 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fields ::= error fields 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct ::= STRUCT lkey fields rkey 
            {
              complexType.struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // struct ::= struct lkey error rkey 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOL 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= STRING 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LBRAC expr RBRAC type 
            {
              complexType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.array(null, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= MULT type 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.pointer(null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= struct 
            {
              complexType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct s = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= LBRAC error RBRAC type 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typedecl ::= TYPE ID type 
            {
              typedecl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= type ID 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= type ID ASS expr 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= CONST type ID ASS expr 
            {
              decl_node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		terminal_node c = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(c.left, t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arglist ::= expr COMMA arglist 
            {
              arglist_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arglist_node(e, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arglist ::= expr 
            {
              arglist_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arglist_node(e, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arglist ::= 
            {
              arglist_node RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ref ::= ID 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new identifier_ref_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ref ::= ref LBRAC expr RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new displ_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ref ::= ref DOT ID 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new field_node(r, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ref ::= ID LPAREN arglist RPAREN 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node rp = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new call_node(i, l, rp.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ref ::= ref LBRAC error RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ref ::= ref DOT error 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literal ::= INTLIT 
            {
              literal_expr_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Integer> i = (terminal_node<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= BOOLLIT 
            {
              literal_expr_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Boolean> b = (terminal_node<Boolean>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atom_expr ::= literal 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal_expr_node e = (literal_expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atom_expr ::= LPAREN expr RPAREN 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atom_expr ::= ref 
            {
              expr_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atom_expr ::= LPAREN error RPAREN 
            {
              expr_node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unary_expr ::= atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unary_expr ::= NOT atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unary_expr ::= NEG atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NEG, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binary_expr ::= unary_expr 
            {
              binaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		unaryOp_node e = (unaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binary_expr ::= binary_expr DIV binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.DIV, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binary_expr ::= binary_expr MULT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.TIMES, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binary_expr ::= binary_expr PLUS binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.PLUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binary_expr ::= binary_expr NEG binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEG, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binary_expr ::= binary_expr LT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binary_expr ::= binary_expr GT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binary_expr ::= binary_expr LEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binary_expr ::= binary_expr GEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binary_expr ::= binary_expr EQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.EQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binary_expr ::= binary_expr NEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binary_expr ::= binary_expr AND binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.AND, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binary_expr ::= binary_expr OR binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.OR, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign ::= ref ASS expr 
            {
              assign_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new assign_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= binary_expr 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= assign 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		assign_node e = (assign_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lkey ::= LKEY 
            {
              Object RESULT =null;
		 symbolTable.enterBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lkey",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rkey ::= RKEY 
            {
              Object RESULT =null;
		 symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rkey",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ifstmt ::= IF LPAREN expr RPAREN lkey stmts rkey 
            {
              ifstmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ifstmt_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while ::= WHILE LPAREN expr RPAREN lkey stmts rkey 
            {
              while_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new while_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // return ::= RETURN 
            {
              return_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node r = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new return_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // return ::= RETURN expr 
            {
              return_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		terminal_node r = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new return_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= decl 
            {
              stmt_node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= expr 
            {
              stmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmt ::= return 
            {
              stmt_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		return_node r = (return_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmt ::= error 
            {
              stmt_node RESULT =null;
		 RESULT = new stmt_node(new node()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // blockstmt ::= ifstmt 
            {
              stmt_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifstmt_node i = (ifstmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // blockstmt ::= while 
            {
              stmt_node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		while_node w = (while_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmts ::= stmt SEMI 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new stmts_node(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmts ::= stmt SEMI stmts 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(s, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmts ::= blockstmt 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmts ::= blockstmt stmts 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // argdecls ::= type ID COMMA argdecls 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, l, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // argdecls ::= type ID 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, null, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // argdecls ::= OUT type ID COMMA argdecls 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, l, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // argdecls ::= OUT type ID 
            {
              argDeclList_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new argDeclList_node(t, i, null, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // argdecls ::= 
            {
              argDeclList_node RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argdecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcsig ::= type ID LPAREN argdecls RPAREN 
            {
              complexType.funcsig RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.funcsig(t, i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcsig",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funcsig ::= VOID ID LPAREN argdecls RPAREN 
            {
              complexType.funcsig RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		argDeclList_node l = (argDeclList_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.funcsig(null, i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcsig",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // fundecl ::= funcsig SEMI 
            {
              fundecl_node RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType.funcsig sig = (complexType.funcsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new fundecl_node(sig, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // fundecl ::= funcsig 
            {
              fundecl_node RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.funcsig sig = (complexType.funcsig)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new fundecl_node(sig, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // partfundef ::= fundecl lkey 
            {
              fundecl_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fundecl_node f = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 f.addArgs(); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("partfundef",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fundef ::= partfundef stmts rkey 
            {
              fundecl_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		fundecl_node f = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 f.setStmts(s); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundef",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fundef ::= partfundef rkey 
            {
              fundecl_node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		fundecl_node f = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 f.setStmts(null); RESULT = f;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundef",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // prog ::= fundecl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // prog ::= prog fundecl 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // prog ::= fundef 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // prog ::= prog fundef 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // prog ::= typedecl SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // prog ::= prog typedecl 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // prog ::= decl SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // prog ::= prog decl SEMI 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
