
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package experimental_compiler;

import java_cup.runtime.ComplexSymbolFactory.*;
import java_cup.runtime.*;
import java.util.HashMap;
import arbol.*;
import arbol.ref.*;
import arbol.val.*;
import arbol.type.*;
import arbol.flow.*;
import arbol.fun.*;
import datos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\022\005\000\002\022" +
    "\006\000\002\022\003\000\002\022\004\000\002\021\006" +
    "\000\002\021\006\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\006\000\002\017\004\000\002" +
    "\017\003\000\002\017\006\000\002\020\005\000\002\023" +
    "\004\000\002\023\006\000\002\023\007\000\002\024\006" +
    "\000\002\024\007\000\002\024\002\000\002\016\003\000" +
    "\002\016\006\000\002\016\005\000\002\016\006\000\002" +
    "\016\006\000\002\016\005\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\012\003" +
    "\000\002\012\005\000\002\013\003\000\002\013\004\000" +
    "\002\013\004\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\010\005\000\002\015\003\000\002" +
    "\015\003\000\002\027\003\000\002\030\003\000\002\004" +
    "\011\000\002\003\011\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\004\000\002\006\005\000\002\006\003\000\002" +
    "\006\004\000\002\025\007\000\002\025\007\000\002\026" +
    "\006\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\024\006\012\010\011\011\023\012\017\024" +
    "\007\044\016\050\004\051\006\052\014\001\002\000\032" +
    "\002\ufffa\006\ufffa\010\ufffa\011\ufffa\012\ufffa\024\ufffa\030" +
    "\ufffa\044\ufffa\050\ufffa\051\ufffa\052\ufffa\055\ufffa\001\002" +
    "\000\004\030\235\001\002\000\032\002\ufff9\006\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\024\ufff9\030\ufff9\044\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\055\ufff9\001\002\000\016\010\011\024" +
    "\007\044\016\050\004\051\006\052\014\001\002\000\026" +
    "\002\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\024\uffbd\044" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\001\002\000\004\004\131" +
    "\001\002\000\004\055\217\001\002\000\034\002\ufff5\004" +
    "\131\006\ufff5\010\ufff5\011\ufff5\012\ufff5\024\ufff5\030\ufff5" +
    "\044\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002\000" +
    "\032\002\ufff8\006\ufff8\010\ufff8\011\ufff8\012\ufff8\024\ufff8" +
    "\030\ufff8\044\ufff8\050\ufff8\051\ufff8\052\ufff8\055\ufff8\001" +
    "\002\000\026\002\211\006\012\010\011\011\023\012\017" +
    "\024\007\044\016\050\004\051\006\052\014\001\002\000" +
    "\020\003\201\023\040\026\042\035\035\053\030\054\037" +
    "\055\033\001\002\000\004\055\177\001\002\000\004\055" +
    "\173\001\002\000\004\030\172\001\002\000\004\004\131" +
    "\001\002\000\016\010\011\024\007\044\016\050\004\051" +
    "\006\052\014\001\002\000\004\055\025\001\002\000\004" +
    "\031\026\001\002\000\016\023\040\026\042\035\035\053" +
    "\030\054\037\055\033\001\002\000\046\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\027\uffe2\030\uffe2\031\127\033\uffe2\034" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\052\045\uffe2\047\053\001\002\000\040\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045" +
    "\uffe6\001\002\000\040\022\102\023\106\024\100\025\104" +
    "\027\uffcf\030\uffcf\033\077\034\111\036\107\037\105\040" +
    "\112\041\110\042\103\043\101\045\uffcf\001\002\000\040" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\027\uffe0\030\uffe0\033" +
    "\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\045\uffe0\001\002\000\050\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\063\027\uffec\030\uffec\031\uffec\033\uffec" +
    "\034\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\047\uffec\001\002\000\004\030\ufff0" +
    "\001\002\000\012\026\042\053\030\054\037\055\033\001" +
    "\002\000\040\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4" +
    "\030\uffe4\033\uffe4\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\043\uffe4\045\uffe4\001\002\000\040\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\033\uffe5\034" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5" +
    "\045\uffe5\001\002\000\012\026\042\053\030\054\037\055" +
    "\033\001\002\000\040\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\027\uffdd\030\uffdd\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\001\002\000\020" +
    "\003\044\023\040\026\042\035\035\053\030\054\037\055" +
    "\033\001\002\000\010\027\uffce\030\uffce\045\uffce\001\002" +
    "\000\004\027\047\001\002\000\004\027\046\001\002\000" +
    "\040\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3" +
    "\033\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\043\uffe3\045\uffe3\001\002\000\040\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\027\uffe1\030\uffe1\033\uffe1\034\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1" +
    "\001\002\000\040\022\uffde\023\uffde\024\uffde\025\uffde\027" +
    "\uffde\030\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\045\uffde\001\002\000\044\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\033\uffe2" +
    "\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\044\052\045\uffe2\047\053\001\002\000\020\003\056" +
    "\023\040\026\042\035\035\053\030\054\037\055\033\001" +
    "\002\000\006\003\055\055\054\001\002\000\046\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\027\uffea\030\uffea\031\uffea\033" +
    "\uffea\034\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\047\uffea\001\002\000\046\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\034\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\001\002\000\004" +
    "\045\061\001\002\000\004\045\060\001\002\000\046\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\033\uffeb\034\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb\001\002\000\046" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\045\uffe8\047\uffe8\001\002\000" +
    "\040\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf" +
    "\033\uffdf\034\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\045\uffdf\001\002\000\022\007\066\010\011" +
    "\024\007\027\uffed\044\016\050\004\051\006\052\014\001" +
    "\002\000\004\027\076\001\002\000\004\055\073\001\002" +
    "\000\016\010\011\024\007\044\016\050\004\051\006\052" +
    "\014\001\002\000\004\055\070\001\002\000\004\046\071" +
    "\001\002\000\022\007\066\010\011\024\007\027\uffed\044" +
    "\016\050\004\051\006\052\014\001\002\000\004\027\uffee" +
    "\001\002\000\004\046\074\001\002\000\022\007\066\010" +
    "\011\024\007\027\uffed\044\016\050\004\051\006\052\014" +
    "\001\002\000\004\027\uffef\001\002\000\046\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9" +
    "\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\047\uffe9\001\002\000\016\023\040" +
    "\026\042\035\035\053\030\054\037\055\033\001\002\000" +
    "\016\023\040\026\042\035\035\053\030\054\037\055\033" +
    "\001\002\000\016\023\040\026\042\035\035\053\030\054" +
    "\037\055\033\001\002\000\016\023\040\026\042\035\035" +
    "\053\030\054\037\055\033\001\002\000\016\023\040\026" +
    "\042\035\035\053\030\054\037\055\033\001\002\000\016" +
    "\023\040\026\042\035\035\053\030\054\037\055\033\001" +
    "\002\000\016\023\040\026\042\035\035\053\030\054\037" +
    "\055\033\001\002\000\016\023\040\026\042\035\035\053" +
    "\030\054\037\055\033\001\002\000\016\023\040\026\042" +
    "\035\035\053\030\054\037\055\033\001\002\000\016\023" +
    "\040\026\042\035\035\053\030\054\037\055\033\001\002" +
    "\000\016\023\040\026\042\035\035\053\030\054\037\055" +
    "\033\001\002\000\016\023\040\026\042\035\035\053\030" +
    "\054\037\055\033\001\002\000\040\022\102\023\106\024" +
    "\100\025\104\027\uffd6\030\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6\001" +
    "\002\000\040\022\102\023\106\024\100\025\104\027\uffd1" +
    "\030\uffd1\033\077\034\uffd1\036\107\037\105\040\112\041" +
    "\110\042\103\043\101\045\uffd1\001\002\000\040\022\102" +
    "\023\106\024\100\025\104\027\uffd5\030\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\045\uffd5\001\002\000\040\022\102\023\106\024\100\025" +
    "\104\027\uffd8\030\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\045\uffd8\001\002\000" +
    "\040\022\uffd9\023\uffd9\024\100\025\104\027\uffd9\030\uffd9" +
    "\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\045\uffd9\001\002\000\040\022\102\023\106" +
    "\024\100\025\104\027\uffd7\030\uffd7\033\uffd7\034\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\045\uffd7" +
    "\001\002\000\040\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\033\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\045\uffdc\001\002\000\040\022" +
    "\102\023\106\024\100\025\104\027\uffd4\030\uffd4\033\uffd4" +
    "\034\uffd4\036\107\037\105\040\112\041\110\042\uffd4\043" +
    "\uffd4\045\uffd4\001\002\000\040\022\uffda\023\uffda\024\100" +
    "\025\104\027\uffda\030\uffda\033\uffda\034\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\001\002" +
    "\000\040\022\102\023\106\024\100\025\104\027\uffd3\030" +
    "\uffd3\033\uffd3\034\uffd3\036\107\037\105\040\112\041\110" +
    "\042\uffd3\043\uffd3\045\uffd3\001\002\000\040\022\uffdb\023" +
    "\uffdb\024\uffdb\025\104\027\uffdb\030\uffdb\033\uffdb\034\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045" +
    "\uffdb\001\002\000\040\022\102\023\106\024\100\025\104" +
    "\027\uffd2\030\uffd2\033\uffd2\034\uffd2\036\107\037\105\040" +
    "\112\041\110\042\103\043\101\045\uffd2\001\002\000\016" +
    "\023\040\026\042\035\035\053\030\054\037\055\033\001" +
    "\002\000\010\027\uffd0\030\uffd0\045\uffd0\001\002\000\042" +
    "\003\uffcd\010\uffcd\011\uffcd\013\uffcd\015\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\035\uffcd\044\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\001\002\000\042\003\143\010" +
    "\011\011\023\013\137\015\136\023\040\024\007\026\042" +
    "\035\035\044\016\050\004\051\006\052\014\053\030\054" +
    "\037\055\033\001\002\000\004\030\uffc8\001\002\000\004" +
    "\030\uffc9\001\002\000\004\055\167\001\002\000\004\026" +
    "\161\001\002\000\004\026\153\001\002\000\044\003\143" +
    "\005\uffc2\010\011\011\023\013\137\015\136\023\040\024" +
    "\007\026\042\035\035\044\016\050\004\051\006\052\014" +
    "\053\030\054\037\055\033\001\002\000\004\005\151\001" +
    "\002\000\044\003\uffc5\005\uffc5\010\uffc5\011\uffc5\013\uffc5" +
    "\015\uffc5\023\uffc5\024\uffc5\026\uffc5\035\uffc5\044\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\001\002" +
    "\000\004\030\uffc7\001\002\000\044\003\uffc6\005\uffc6\010" +
    "\uffc6\011\uffc6\013\uffc6\015\uffc6\023\uffc6\024\uffc6\026\uffc6" +
    "\035\uffc6\044\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\001\002\000\004\030\146\001\002\000\044" +
    "\003\143\005\uffc4\010\011\011\023\013\137\015\136\023" +
    "\040\024\007\026\042\035\035\044\016\050\004\051\006" +
    "\052\014\053\030\054\037\055\033\001\002\000\004\005" +
    "\uffc3\001\002\000\026\002\uffbe\006\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\024\uffbe\044\uffbe\050\uffbe\051\uffbe\052\uffbe\001" +
    "\002\000\056\002\uffcc\003\uffcc\004\uffcc\005\uffcc\006\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015\uffcc\023\uffcc\024" +
    "\uffcc\026\uffcc\030\uffcc\035\uffcc\044\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\055\uffcc\001\002\000\004\005" +
    "\uffc1\001\002\000\016\023\040\026\042\035\035\053\030" +
    "\054\037\055\033\001\002\000\004\027\155\001\002\000" +
    "\004\004\131\001\002\000\042\003\143\010\011\011\023" +
    "\013\137\015\136\023\040\024\007\026\042\035\035\044" +
    "\016\050\004\051\006\052\014\053\030\054\037\055\033" +
    "\001\002\000\004\005\151\001\002\000\044\003\uffcb\005" +
    "\uffcb\010\uffcb\011\uffcb\013\uffcb\015\uffcb\023\uffcb\024\uffcb" +
    "\026\uffcb\035\uffcb\044\uffcb\050\uffcb\051\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\055\uffcb\001\002\000\016\023\040\026\042" +
    "\035\035\053\030\054\037\055\033\001\002\000\004\027" +
    "\163\001\002\000\004\004\131\001\002\000\042\003\143" +
    "\010\011\011\023\013\137\015\136\023\040\024\007\026" +
    "\042\035\035\044\016\050\004\051\006\052\014\053\030" +
    "\054\037\055\033\001\002\000\004\005\151\001\002\000" +
    "\044\003\uffca\005\uffca\010\uffca\011\uffca\013\uffca\015\uffca" +
    "\023\uffca\024\uffca\026\uffca\035\uffca\044\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\001\002\000\006" +
    "\030\ufff2\031\170\001\002\000\016\023\040\026\042\035" +
    "\035\053\030\054\037\055\033\001\002\000\004\030\ufff1" +
    "\001\002\000\026\002\uffb9\006\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\024\uffb9\044\uffb9\050\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\010\026\174\030\ufff2\031\170\001\002\000\022\007" +
    "\066\010\011\024\007\027\uffed\044\016\050\004\051\006" +
    "\052\014\001\002\000\004\027\176\001\002\000\004\004" +
    "\uffc0\001\002\000\016\010\011\024\007\044\016\050\004" +
    "\051\006\052\014\001\002\000\030\002\ufff3\006\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\024\ufff3\030\ufff3\044\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\001\002\000\004\045\205\001\002\000" +
    "\004\045\203\001\002\000\016\010\011\024\007\044\016" +
    "\050\004\051\006\052\014\001\002\000\032\002\ufff7\006" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\024\ufff7\030\ufff7\044\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\055\ufff7\001\002\000\016\010" +
    "\011\024\007\044\016\050\004\051\006\052\014\001\002" +
    "\000\032\002\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\024" +
    "\ufff4\030\ufff4\044\ufff4\050\ufff4\051\ufff4\052\ufff4\055\ufff4" +
    "\001\002\000\026\002\uffba\006\uffba\010\uffba\011\uffba\012" +
    "\uffba\024\uffba\044\uffba\050\uffba\051\uffba\052\uffba\001\002" +
    "\000\026\002\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\024" +
    "\uffbc\044\uffbc\050\uffbc\051\uffbc\052\uffbc\001\002\000\004" +
    "\002\001\001\002\000\004\030\213\001\002\000\026\002" +
    "\uffb8\006\uffb8\010\uffb8\011\uffb8\012\uffb8\024\uffb8\044\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\001\002\000\004\003\215\001" +
    "\002\000\004\005\151\001\002\000\034\002\ufffb\004\ufffb" +
    "\006\ufffb\010\ufffb\011\ufffb\012\ufffb\024\ufffb\030\ufffb\044" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\055\ufffb\001\002\000\004" +
    "\026\220\001\002\000\022\007\066\010\011\024\007\027" +
    "\uffed\044\016\050\004\051\006\052\014\001\002\000\004" +
    "\027\222\001\002\000\004\004\uffbf\001\002\000\020\003" +
    "\226\010\011\024\007\044\016\050\004\051\006\052\014" +
    "\001\002\000\004\005\151\001\002\000\004\055\230\001" +
    "\002\000\022\003\226\005\ufffe\010\011\024\007\044\016" +
    "\050\004\051\006\052\014\001\002\000\004\005\ufffd\001" +
    "\002\000\004\030\231\001\002\000\022\003\226\005\000" +
    "\010\011\024\007\044\016\050\004\051\006\052\014\001" +
    "\002\000\004\005\uffff\001\002\000\034\002\ufffc\004\ufffc" +
    "\006\ufffc\010\ufffc\011\ufffc\012\ufffc\024\ufffc\030\ufffc\044" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\055\ufffc\001\002\000\032" +
    "\002\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\024\ufff6\030" +
    "\ufff6\044\ufff6\050\ufff6\051\ufff6\052\ufff6\055\ufff6\001\002" +
    "\000\026\002\uffbb\006\uffbb\010\uffbb\011\uffbb\012\uffbb\024" +
    "\uffbb\044\uffbb\050\uffbb\051\uffbb\052\uffbb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\020\002\014\017\017\020\004\021\012\023" +
    "\020\025\021\026\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\233\021\012\001" +
    "\001\000\002\001\001\000\004\027\222\001\001\000\002" +
    "\001\001\000\004\027\213\001\001\000\002\001\001\000" +
    "\016\017\017\020\206\021\012\023\211\025\021\026\207" +
    "\001\001\000\020\010\042\011\035\012\031\013\040\014" +
    "\030\015\201\016\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\131\001\001\000" +
    "\006\017\023\021\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\042\011\035\012\031\013\040\014" +
    "\030\015\033\016\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\035\012\061\016\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\035\012\047\016\050\001\001\000\002\001\001\000\020" +
    "\010\042\011\035\012\031\013\040\014\030\015\044\016" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\010\042\011\035\012\031" +
    "\013\040\014\030\015\056\016\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\064\021\012\024\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\066\021" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\064\021\012\024\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\064\021\012\024\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\035\012" +
    "\031\013\040\014\125\016\050\001\001\000\014\011\035" +
    "\012\031\013\040\014\124\016\050\001\001\000\014\011" +
    "\035\012\031\013\040\014\123\016\050\001\001\000\014" +
    "\011\035\012\031\013\040\014\122\016\050\001\001\000" +
    "\014\011\035\012\031\013\040\014\121\016\050\001\001" +
    "\000\014\011\035\012\031\013\040\014\120\016\050\001" +
    "\001\000\014\011\035\012\031\013\040\014\117\016\050" +
    "\001\001\000\014\011\035\012\031\013\040\014\116\016" +
    "\050\001\001\000\014\011\035\012\031\013\040\014\115" +
    "\016\050\001\001\000\014\011\035\012\031\013\040\014" +
    "\114\016\050\001\001\000\014\011\035\012\031\013\040" +
    "\014\113\016\050\001\001\000\014\011\035\012\031\013" +
    "\040\014\112\016\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\042\011\035\012\031\013\040" +
    "\014\030\015\127\016\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\141\004\143\005\137\006\140" +
    "\007\144\010\042\011\035\012\031\013\040\014\030\015" +
    "\132\016\026\017\134\021\012\023\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\141\004\143\005\137" +
    "\006\151\007\144\010\042\011\035\012\031\013\040\014" +
    "\030\015\132\016\026\017\134\021\012\023\133\001\001" +
    "\000\004\030\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\141" +
    "\004\143\005\137\006\146\007\144\010\042\011\035\012" +
    "\031\013\040\014\030\015\132\016\026\017\134\021\012" +
    "\023\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\010\042\011\035" +
    "\012\031\013\040\014\030\015\153\016\026\001\001\000" +
    "\002\001\001\000\004\027\155\001\001\000\040\003\141" +
    "\004\143\005\137\006\156\007\144\010\042\011\035\012" +
    "\031\013\040\014\030\015\132\016\026\017\134\021\012" +
    "\023\133\001\001\000\004\030\157\001\001\000\002\001" +
    "\001\000\020\010\042\011\035\012\031\013\040\014\030" +
    "\015\161\016\026\001\001\000\002\001\001\000\004\027" +
    "\163\001\001\000\040\003\141\004\143\005\137\006\164" +
    "\007\144\010\042\011\035\012\031\013\040\014\030\015" +
    "\132\016\026\017\134\021\012\023\133\001\001\000\004" +
    "\030\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\042\011\035\012\031\013\040\014\030\015\170" +
    "\016\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\064\021\012\024\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\177\021" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\203\021\012\001\001\000\002\001" +
    "\001\000\006\017\205\021\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\064\021\012\024\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\224\021\012\022\223\001" +
    "\001\000\004\030\232\001\001\000\002\001\001\000\010" +
    "\017\224\021\012\022\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\224\021\012\022\231\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        Main.report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        Main.report_error("Unexpected token", cur_token);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        Main.report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // fields ::= type ID SEMI 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.struct(null, i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // fields ::= type ID SEMI fields 
            {
              complexType.struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f.addField(i.value, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // fields ::= error 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fields ::= error fields 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fields",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // struct ::= STRUCT lkey fields rkey 
            {
              complexType.struct RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType.struct f = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // struct ::= struct lkey error rkey 
            {
              complexType.struct RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("struct",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOL 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<basicType> t = (terminal_node<basicType>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.primitive(null, t.value); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= STRING 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= LBRAC expr RBRAC type 
            {
              complexType RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.array(null, t, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= MULT type 
            {
              complexType RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new complexType.pointer(null, t); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= struct 
            {
              complexType RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType.struct s = (complexType.struct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= LBRAC error RBRAC type 
            {
              complexType RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typedecl ::= TYPE ID type 
            {
              typedecl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= type ID 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= type ID ASS expr 
            {
              decl_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= CONST type ID ASS expr 
            {
              decl_node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		terminal_node c = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new decl_node(c.left, t, i, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arglist ::= type ID COMMA arglist 
            {
              arglist_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arglist_node(t, i, l, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arglist ::= OUT type ID COMMA arglist 
            {
              arglist_node RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new arglist_node(t, i, l, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arglist ::= 
            {
              arglist_node RESULT =null;
		 RESULT = new arglist_node(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arglist",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ref ::= ID 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new identifier_ref_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ref ::= ref LBRAC expr RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new displ_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ref ::= ref DOT ID 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new field_node(r, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ref ::= ID LPAREN arglist RPAREN 
            {
              ref_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node rp = (terminal_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new call_node(i, l, rp.right); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ref ::= ref LBRAC error RBRAC 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ref ::= ref DOT error 
            {
              ref_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literal ::= INTLIT 
            {
              literal_expr_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Integer> i = (terminal_node<Integer>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literal ::= BOOLLIT 
            {
              literal_expr_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		terminal_node<Boolean> b = (terminal_node<Boolean>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new literal_expr_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // atom_expr ::= literal 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		literal_expr_node e = (literal_expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atom_expr ::= LPAREN expr RPAREN 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atom_expr ::= ref 
            {
              expr_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // atom_expr ::= LPAREN error RPAREN 
            {
              expr_node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atom_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unary_expr ::= atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unary_expr ::= NOT atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NOT, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unary_expr ::= NEG atom_expr 
            {
              unaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new unaryOp_node(OP.NEG, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // binary_expr ::= unary_expr 
            {
              binaryOp_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		unaryOp_node e = (unaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binary_expr ::= binary_expr DIV binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.DIV, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binary_expr ::= binary_expr MULT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.TIMES, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binary_expr ::= binary_expr PLUS binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.PLUS, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // binary_expr ::= binary_expr NEG binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEG, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // binary_expr ::= binary_expr LT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // binary_expr ::= binary_expr GT binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GT, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // binary_expr ::= binary_expr LEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.LEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // binary_expr ::= binary_expr GEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.GEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // binary_expr ::= binary_expr EQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.EQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // binary_expr ::= binary_expr NEQ binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.NEQ, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // binary_expr ::= binary_expr AND binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.AND, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binary_expr ::= binary_expr OR binary_expr 
            {
              binaryOp_node RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		binaryOp_node e1 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e2 = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new binaryOp_node(OP.OR, e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binary_expr",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign ::= ref ASS expr 
            {
              assign_node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ref_node r = (ref_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new assign_node(r, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= binary_expr 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		binaryOp_node e = (binaryOp_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= assign 
            {
              expr_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		assign_node e = (assign_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new expr_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lkey ::= LKEY 
            {
              Object RESULT =null;
		 symbolTable.enterBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lkey",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rkey ::= RKEY 
            {
              Object RESULT =null;
		 symbolTable.exitBlock(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rkey",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ifstmt ::= IF LPAREN expr RPAREN lkey stmts rkey 
            {
              ifstmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ifstmt_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while ::= WHILE LPAREN expr RPAREN lkey stmts rkey 
            {
              while_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new while_node(e, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= decl 
            {
              stmt_node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= expr 
            {
              stmt_node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		expr_node e = (expr_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= error 
            {
              stmt_node RESULT =null;
		 RESULT = new stmt_node(new node()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // blockstmt ::= ifstmt 
            {
              stmt_node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ifstmt_node i = (ifstmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // blockstmt ::= while 
            {
              stmt_node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		while_node w = (while_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmt_node(w); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmts ::= stmt SEMI 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new stmts_node(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmts ::= stmt SEMI stmts 
            {
              stmts_node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		stmt_node s = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(s, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmts ::= blockstmt 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmts ::= blockstmt stmts 
            {
              stmts_node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmt_node b = (stmt_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		stmts_node ss = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new stmts_node(b, ss); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funcsig ::= type ID LPAREN arglist RPAREN 
            {
              complexType.funcsig RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		complexType t = (complexType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.funcsig(t, i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcsig",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funcsig ::= VOID ID LPAREN arglist RPAREN 
            {
              complexType.funcsig RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		terminal_node<String> i = (terminal_node<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arglist_node l = (arglist_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new complexType.funcsig(null, i, l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcsig",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fundecl ::= funcsig lkey stmts rkey 
            {
              fundecl_node RESULT =null;
		int sigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		complexType.funcsig sig = (complexType.funcsig)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		stmts_node s = (stmts_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new fundecl_node(sig, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fundecl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // prog ::= fundecl 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // prog ::= prog fundecl 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		fundecl_node d = (fundecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // prog ::= typedecl SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // prog ::= prog typedecl 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		typedecl_node d = (typedecl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 d.gest(); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // prog ::= decl SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // prog ::= prog decl SEMI 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		decl_node d = (decl_node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 d.gest(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
